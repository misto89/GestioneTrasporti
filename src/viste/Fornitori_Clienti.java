/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Fornitori_Clienti.java
 *
 * Created on 14-apr-2012, 17.36.36
 */
package viste;

import com.itextpdf.text.DocumentException;
import controllo.FrontController;
import eccezioni.EccezioneEliminazioneImpossibile;
import entita.Entity;
import entita.Fornitore;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import stampa.StampaAnagrafica;

/**
 *
 * @author Andle
 */
public class Fornitori_Clienti extends javax.swing.JFrame {

    /** Creates new form Fornitori_Clienti */
    public Fornitori_Clienti() {
        initComponents();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFornitori = new javax.swing.JTable();
        btnNuovo = new javax.swing.JButton();
        btnElimina = new javax.swing.JButton();
        btnModifica = new javax.swing.JButton();
        mnuBar = new javax.swing.JMenuBar();
        mnuFiltra = new javax.swing.JMenu();
        mnuTutti = new javax.swing.JCheckBoxMenuItem();
        mnuNome = new javax.swing.JCheckBoxMenuItem();
        mnuPiva = new javax.swing.JCheckBoxMenuItem();
        mnuCodFisc = new javax.swing.JCheckBoxMenuItem();
        mnuStampa = new javax.swing.JMenu();
        mnuProspetto = new javax.swing.JMenuItem();
        mnuSelezionato = new javax.swing.JMenuItem();

        setTitle("Anagrafica Fornitori/Clienti");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblFornitori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblFornitori);

        btnNuovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nuovaspedizione.png"))); // NOI18N
        btnNuovo.setText("Nuovo");
        btnNuovo.setToolTipText("Inserisci un nuovo fornitore");
        btnNuovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuovoActionPerformed(evt);
            }
        });

        btnElimina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancella.png"))); // NOI18N
        btnElimina.setText("Elimina");
        btnElimina.setEnabled(false);
        btnElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminaActionPerformed(evt);
            }
        });

        btnModifica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/modifica.png"))); // NOI18N
        btnModifica.setText("Modifica");
        btnModifica.setEnabled(false);
        btnModifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificaActionPerformed(evt);
            }
        });

        mnuFiltra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtra.png"))); // NOI18N
        mnuFiltra.setText("Filtra");

        mnuTutti.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        mnuTutti.setSelected(true);
        mnuTutti.setText("Mostra tutti");
        mnuTutti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mostratutto.png"))); // NOI18N
        mnuTutti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTuttiActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuTutti);

        mnuNome.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNome.setSelected(true);
        mnuNome.setText("Per Nome");
        mnuNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pernome.png"))); // NOI18N
        mnuNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNomeActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuNome);

        mnuPiva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mnuPiva.setSelected(true);
        mnuPiva.setText("Per Partita IVA");
        mnuPiva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtropiva.png"))); // NOI18N
        mnuPiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPivaActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuPiva);

        mnuCodFisc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnuCodFisc.setSelected(true);
        mnuCodFisc.setText("Per Codice fiscale");
        mnuCodFisc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtrocodfisc.png"))); // NOI18N
        mnuCodFisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCodFiscActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuCodFisc);

        mnuBar.add(mnuFiltra);

        mnuStampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampa.setText("Stampa");

        mnuProspetto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuProspetto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/prospetto.png"))); // NOI18N
        mnuProspetto.setText("Prospetto");
        mnuProspetto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuProspettoActionPerformed(evt);
            }
        });
        mnuStampa.add(mnuProspetto);

        mnuSelezionato.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSelezionato.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fornclienti_menu.png"))); // NOI18N
        mnuSelezionato.setText("Selezionato");
        mnuSelezionato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelezionatoActionPerformed(evt);
            }
        });
        mnuStampa.add(mnuSelezionato);

        mnuBar.add(mnuStampa);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuovo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnModifica)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnElimina)
                .addContainerGap(696, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1095, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnElimina, btnModifica, btnNuovo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuovo)
                    .addComponent(btnModifica)
                    .addComponent(btnElimina))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnElimina, btnNuovo});

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1111)/2, (screenSize.height-624)/2, 1111, 624);
    }// </editor-fold>//GEN-END:initComponents
/*
 * Questo metodo costruisce e popola una tabella con i valori presenti nel parametro. 
 */
private void popolaTabella(List fornitori) {
    btnElimina.setEnabled(false);
    btnModifica.setEnabled(false);
    
    fornitoriInTabella = fornitori;
    Object[] arForn = fornitori.toArray();
    Object[][] arrayFornitori = new Object[arForn.length][Fornitore.NUM_CAMPI];
    
    int contForn = 0;
    for (Object forn : arForn) {
        arrayFornitori[contForn++] = ((Fornitore) forn).toArray();
    }
    
    DefaultTableModel tm = new javax.swing.table.DefaultTableModel(
        arrayFornitori,
            
        new String [] {
            "COD.", "NOME", "TITOLARE", "P. IVA", "COD. FISCALE", "BANCA", "IBAN", "TELEFONO 1", "TELEFONO 2", "FAX",
                "EMAIL", "INDIRIZZO", "CAP", "CITTA'" , "PROV.", "NAZIONE"
            }
        ) 
    
        {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            final Class[] TYPES = {
                Integer.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class,
                String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class
            
            };
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return TYPES[columnIndex];
            }
                        
        };
    
    /*
     * Costruzione della tabella
     */
    tblFornitori.setModel(tm);
    tblFornitori.setRowSorter(new TableRowSorter(tm));
    jScrollPane1.setViewportView(tblFornitori);
    tblFornitori.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    
    //Le seguenti costanti indicano i numeri di colonna dei campi
    final int COD = 0;
    final int NOME = 1;
    final int TITOLARE = 2;
    final int PIVA = 3;
    final int CODFISC = 4;
    final int BANCA = 5;
    final int IBAN = 6;
    final int TEL1 = 7;
    final int TEL2 = 8;
    final int FAX = 9;
    final int EMAIL = 10;
    final int INDIRIZZO = 11;
    final int CAP = 12;
    final int CITTA = 13;
    final int PROV = 14;
    final int NAZIONE = 15;

    boolean[] resizable = {false, true, true, false, false, true, false, false, false, false, true, true, false, true, true, true};
    int[] width = {70, 380, 90, 100, 130, 100, 210, 90, 90, 90, 100, 170, 45, 70, 30, 70};

   
    for (int i = COD; i < NAZIONE; i++) {
        tblFornitori.getColumnModel().getColumn(i).setResizable(resizable[i]);
        tblFornitori.getColumnModel().getColumn(i).setPreferredWidth(width[i]);
    }

    tblFornitori.getTableHeader().setReorderingAllowed(false); //Fa in modo che l'utente non possa modificare l'ordine delle colonne
    tblFornitori.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);


    /*
     * Aggiunge un evento alla tabella.
     */
    tblFornitori.addMouseListener(new MouseAdapter() {

        public void mouseClicked(MouseEvent me) {
            btnModifica.setEnabled(true);
            btnElimina.setEnabled(true);
        }

    });
 }   
    
    /**
     * Questo metodo, che corrisponde all'evento che si innesca con l'apertura del frame, recupera l'elenco di tutti i fornitori e
     * popola una tabella con questo elenco.
     */
private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    mnuNome.setState(false);
    mnuCodFisc.setState(false);
    mnuPiva.setState(false);
    mnuTutti.setState(true);
    List<Entity> fornitori = FrontController.getAnagrafe(Fornitore.class);
    popolaTabella(fornitori);
    patternRicerca = null;
}//GEN-LAST:event_formWindowOpened
/**
 * Questo evento si verifica alla pressione del tasto di eliminazione.
 * @param evt 
 */

private void btnEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminaActionPerformed
// TODO add your handling code here:
    
        
        if (tblFornitori.getSelectedRow() > -1) {
            Integer cod = fornitoriInTabella.get(getIndexSelectedFornitore()).getCod();
            
            /*
             * Viene mostrato un messagio di conferma eliminazione. Se l'utente accetta
             * si cerca di eliminare il fornitore corrispondente all'id selezionato.
             */
            final int RESPONSE = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler procedere con l'eliminazione?", "Conferma eliminazione", JOptionPane.OK_CANCEL_OPTION);
            if (RESPONSE == JOptionPane.OK_OPTION) {
                Fornitore fornitore = new Fornitore(cod);
                
                try {
                    //Viene mostrato un messaggio a seconda dell'esito dell'operazione
                    if (FrontController.delete(fornitore))
                        JOptionPane.showMessageDialog(null, "Eliminazione eseguita con successo!", "", JOptionPane.INFORMATION_MESSAGE);
                    else
                        JOptionPane.showMessageDialog(null, "Si è verificato un errore durante l'eliminazione", "Errore" ,JOptionPane.ERROR_MESSAGE);
                
                } catch (EccezioneEliminazioneImpossibile e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                }
                
                if (mnuNome.isSelected())
                    visualizzaDati("nome", patternRicerca);
                else if (mnuPiva.isSelected())
                    visualizzaDati("piva", patternRicerca);
                else if (mnuCodFisc.isSelected())
                    visualizzaDati("codfisc", patternRicerca);
                else {
                    visualizzaDati(null, null);
                }
            }
            
        } else {
            JOptionPane.showMessageDialog(null, "Seleziona una riga da eliminare!", "Attenzione", JOptionPane.WARNING_MESSAGE);
        }
}//GEN-LAST:event_btnEliminaActionPerformed

/**
 * Questo evento si verifica alla pressione del tasto Nuovo
 */
private void btnNuovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuovoActionPerformed
// TODO add your handling code here:
    FrontController.open(new DatiAnagrafica(this, rootPaneCheckingEnabled));
}//GEN-LAST:event_btnNuovoActionPerformed

private void mnuNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNomeActionPerformed
// TODO add your handling code here:
    String nome = JOptionPane.showInputDialog(null, "Inserire il Nome del fornitore/cliente da cercare:");
    patternRicerca = nome;
    visualizzaDati("nome", nome);
}//GEN-LAST:event_mnuNomeActionPerformed

private void mnuPivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPivaActionPerformed
// TODO add your handling code here:
    String piva = JOptionPane.showInputDialog(null, "Inserire la Partita IVA del fornitore/cliente da cercare:");
    patternRicerca = piva;
    visualizzaDati("piva", piva);
}//GEN-LAST:event_mnuPivaActionPerformed

/*
 * Ricevuto in ingresso il tipo di ordinamento da effettuare, richiama dal FrontController la tipologia di ordinamento
 * e popola la tabella con i risultati relativi.
 */
//private void visualizzaOrderedBy(String type) {
//    pulisciText();
//    mnuNome.setState(false);
//    mnuCodFisc.setState(false);
//    mnuPiva.setState(false);
//    mnuTutti.setState(true);
//    List<Fornitore> fornitori=null;
//    if (type.equalsIgnoreCase("nome")) {
//        fornitori = FrontController.orderFornitori(Fornitore.RIC_NOME);
//        mnuOrdNome.setState(true);
//        mnuOrdCodFisc.setState(false);
//        mnuOrdPIva.setState(false);
//    } else if (type.equalsIgnoreCase("piva")) {
//        fornitori = FrontController.orderFornitori(Fornitore.RIC_PIVA);
//        mnuOrdNome.setState(false);
//        mnuOrdCodFisc.setState(false);
//        mnuOrdPIva.setState(true);
//    } else if (type.equalsIgnoreCase("codfisc")) {
//        fornitori = FrontController.orderFornitori(Fornitore.RIC_CODFISC);
//        mnuOrdNome.setState(false);
//        mnuOrdCodFisc.setState(true);
//        mnuOrdPIva.setState(false);
//    }
//    
//    if (fornitori != null) {
//        popolaTabella(fornitori);
//    }
//}

void visualizzaDati() {
    if (mnuNome.isSelected())
            visualizzaDati("nome", patternRicerca);
        else if (mnuPiva.isSelected())
            visualizzaDati("piva", patternRicerca);
        else if (mnuCodFisc.isSelected())
            visualizzaDati("codfisc", patternRicerca);
        else {
            visualizzaDati(null, null);
        }

}

/*
 * Parametrizza la visualizzazione dei dati, viene richiamato a seguito della selezione del Menu, riceve in input il
 * tipo della ricerca e il pattern da ricercare ed effettua la ricerca e la relativa visualizzazione dei dati.
 */
private void visualizzaDati(String type, String pattern) {
//    mnuOrdNome.setState(true);
//    mnuOrdPIva.setState(false);
//    mnuOrdCodFisc.setState(false);
    List<Fornitore> fornitori = new ArrayList<Fornitore>();
    
    if (type == null) {
        Object[] forn = FrontController.getAnagrafe(Fornitore.class).toArray();
        for (Object f : forn) {
            fornitori.add((Fornitore) f);
        }
        popolaTabella(fornitori);
        mnuNome.setState(false);
        mnuCodFisc.setState(false);
        mnuPiva.setState(false);
        mnuTutti.setState(true);
        
    } else if (type.equalsIgnoreCase("nome")) {
        if (pattern != null) {
            fornitori = FrontController.getFornitori(Fornitore.RIC_NOME, pattern);
            if (fornitori != null) {
                popolaTabella(fornitori);
                mnuNome.setState(true);
                mnuCodFisc.setState(false);
                mnuPiva.setState(false);
                mnuTutti.setState(false);
            } else {
                JOptionPane.showMessageDialog(null, "Si è verificato un errore imprevisto durante la ricerca", "Errore" ,JOptionPane.ERROR_MESSAGE);
                mnuNome.setState(false);
            }
            
        } else {
            mnuNome.setState(false);
        }
        
    } else if (type.equalsIgnoreCase("piva")) {
        if (pattern != null) {
            fornitori = FrontController.getFornitori(Fornitore.RIC_PIVA, pattern);
            if (fornitori != null) {
                popolaTabella(fornitori);
                mnuNome.setState(false);
                mnuCodFisc.setState(false);
                mnuPiva.setState(true);
                mnuTutti.setState(false);
            } else {
                JOptionPane.showMessageDialog(null, "Si è verificato un errore imprevisto durante la ricerca", "Errore" ,JOptionPane.ERROR_MESSAGE);
                mnuPiva.setState(false);
            }
        } else {
            mnuPiva.setState(false);
        }
        
    } else if (type.equalsIgnoreCase("codfisc")) {
        if (pattern != null) {
            fornitori = FrontController.getFornitori(Fornitore.RIC_CODFISC, pattern);
            if (fornitori != null) {
                popolaTabella(fornitori);
                mnuNome.setState(false);
                mnuCodFisc.setState(true);
                mnuPiva.setState(false);
                mnuTutti.setState(false);
            } else {
                JOptionPane.showMessageDialog(null, "Si è verificato un errore imprevisto durante la ricerca", "Errore" ,JOptionPane.ERROR_MESSAGE);
                mnuCodFisc.setState(false);
            }
        } else {
            mnuCodFisc.setState(false);
        }
    } 
        
    //Predispone le text per la modifica se la ricerca produce un solo risultato.
//    if (fornitori.size() == 1) {
//        Fornitore uniqueResult = fornitori.get(0);
//        txtCod.setText(String.valueOf(uniqueResult.getCod()));
//        txtNome.setText(uniqueResult.getNome());
//        txtTitolare.setText(uniqueResult.getTitolare());
//        txtPIva.setText(uniqueResult.getPiva());
//        txtCodFisc.setText(uniqueResult.getCodfiscale());
//        txtEmail.setText(uniqueResult.getEmail());
//        txtIndirizzo.setText(uniqueResult.getIndirizzo());
//        txtTelefono1.setText(uniqueResult.getTelefono1());
//        txtTelefono2.setText(uniqueResult.getTelefono2());
//        txtFax.setText(uniqueResult.getFax());
//        txtCap.setText(uniqueResult.getCap());
//        txtCitta.setText(uniqueResult.getCitta());
//        txtProv.setText(uniqueResult.getProv());
//        txtNazione.setText(uniqueResult.getNazione());
//        txtBanca.setText(uniqueResult.getBanca());
//        txtIban.setText(uniqueResult.getIban());
//        txtNomeRef1.setText(uniqueResult.getNomeRef1());
//        txtNomeRef2.setText(uniqueResult.getNomeRef2());
//        txtEmailRef1.setText(uniqueResult.getEmailRef1());
//        txtEmailRef2.setText(uniqueResult.getEmailRef2());
//        txtTelRef1.setText(uniqueResult.getTelRef1());
//        txtTelRef2.setText(uniqueResult.getTelRef2());
//        
//        txtNome.requestFocus();
//    }
    
}    

private void mnuCodFiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCodFiscActionPerformed
// TODO add your handling code here:
    String codfisc = JOptionPane.showInputDialog(null, "Inserire il Codice fiscale del fornitore/cliente da cercare:");
    patternRicerca = codfisc;
    visualizzaDati("codfisc", codfisc);
}//GEN-LAST:event_mnuCodFiscActionPerformed

private void mnuTuttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTuttiActionPerformed
// TODO add your handling code here:
    formWindowOpened(null);
    patternRicerca = null;
}//GEN-LAST:event_mnuTuttiActionPerformed

private void mnuProspettoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuProspettoActionPerformed
// TODO add your handling code here:
    try {
        new StampaAnagrafica(fornitoriInTabella).printAndOpen();
        
    } catch (DocumentException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_mnuProspettoActionPerformed

private void mnuSelezionatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelezionatoActionPerformed
// TODO add your handling code here:
    if (tblFornitori.getSelectedRow() == -1) {
        JOptionPane.showMessageDialog(null, "Seleziona una riga da stampare!", "Attenzione", JOptionPane.WARNING_MESSAGE);
    } else {
        try {
            new StampaAnagrafica(fornitoriInTabella.get(getIndexSelectedFornitore())).printAndOpen();

        } catch (DocumentException ex) {
            Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_mnuSelezionatoActionPerformed

private void btnModificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificaActionPerformed
// TODO add your handling code here:
    if (tblFornitori.getSelectedRow() > -1) {
        FrontController.open(new DatiAnagrafica(this, rootPaneCheckingEnabled, fornitoriInTabella.get(getIndexSelectedFornitore())));
    } else {
        JOptionPane.showMessageDialog(null, "Seleziona una riga da eliminare!", "Attenzione", JOptionPane.WARNING_MESSAGE);
    }
}//GEN-LAST:event_btnModificaActionPerformed

private int getIndexSelectedFornitore() {
    Fornitore forn = new Fornitore();
    forn.setCod((Integer) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), 0));

    return fornitoriInTabella.indexOf(forn);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnElimina;
    private javax.swing.JButton btnModifica;
    private javax.swing.JButton btnNuovo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JCheckBoxMenuItem mnuCodFisc;
    private javax.swing.JMenu mnuFiltra;
    private javax.swing.JCheckBoxMenuItem mnuNome;
    private javax.swing.JCheckBoxMenuItem mnuPiva;
    private javax.swing.JMenuItem mnuProspetto;
    private javax.swing.JMenuItem mnuSelezionato;
    private javax.swing.JMenu mnuStampa;
    private javax.swing.JCheckBoxMenuItem mnuTutti;
    private javax.swing.JTable tblFornitori;
    // End of variables declaration//GEN-END:variables
    
    private String patternRicerca = null; //Indica qual'è il pattern utilizzato per l'ultima ricerca. Se == null vuol dire che il sistema mostra l'intero elenco
    private List<Fornitore> fornitoriInTabella = new LinkedList<Fornitore>();
    
}
