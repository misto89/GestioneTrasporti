/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Fornitori_Clienti.java
 *
 * Created on 14-apr-2012, 17.36.36
 */
package viste;

import com.itextpdf.text.DocumentException;
import controllo.FrontController;
import eccezioni.EccezioneChiaveDuplicata;
import eccezioni.EccezioneValoreCampoTroppoLungo;
import entita.Entity;
import entita.Fornitore;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import stampa.StampaAnagrafica;

/**
 *
 * @author Andle
 */
public class Fornitori_Clienti extends javax.swing.JFrame {

    /** Creates new form Fornitori_Clienti */
    public Fornitori_Clienti() {
        initComponents();
        ColorManager color = new ColorManager();
        color.changeColor(pnlDati);
        color.changeColor(pnlRef1);
        color.changeColor(pnlRef2);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFornitori = new javax.swing.JTable();
        btnNuovo = new javax.swing.JButton();
        btnSalva = new javax.swing.JButton();
        btnElimina = new javax.swing.JButton();
        btnModPiva = new javax.swing.JButton();
        pnlRef1 = new javax.swing.JPanel();
        lblNomeRef1 = new javax.swing.JLabel();
        lblEmailRef1 = new javax.swing.JLabel();
        lblTelRef1 = new javax.swing.JLabel();
        txtNomeRef1 = new javax.swing.JTextField();
        txtEmailRef1 = new javax.swing.JTextField();
        txtTelRef1 = new javax.swing.JTextField();
        pnlRef2 = new javax.swing.JPanel();
        lblNomeRef2 = new javax.swing.JLabel();
        lblEmailRef2 = new javax.swing.JLabel();
        lblTelRef2 = new javax.swing.JLabel();
        txtNomeRef2 = new javax.swing.JTextField();
        txtEmailRef2 = new javax.swing.JTextField();
        txtTelRef2 = new javax.swing.JTextField();
        pnlDati = new javax.swing.JPanel();
        lblCap = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtProv = new javax.swing.JTextField();
        lblCitta = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblNazione = new javax.swing.JLabel();
        txtBanca = new javax.swing.JTextField();
        txtPIva = new javax.swing.JTextField();
        lblCodFisc = new javax.swing.JLabel();
        lblIban = new javax.swing.JLabel();
        lblTit = new javax.swing.JLabel();
        txtIban = new javax.swing.JTextField();
        txtCodFisc = new javax.swing.JTextField();
        txtIndirizzo = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        txtNazione = new javax.swing.JTextField();
        lblBanca = new javax.swing.JLabel();
        lblTel1 = new javax.swing.JLabel();
        txtTelefono1 = new javax.swing.JTextField();
        lblProvi = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtCap = new javax.swing.JTextField();
        txtCod = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        lblPIva = new javax.swing.JLabel();
        lblIndirizzo = new javax.swing.JLabel();
        txtTitolare = new javax.swing.JTextField();
        txtCitta = new javax.swing.JTextField();
        lblTel2 = new javax.swing.JLabel();
        txtTelefono2 = new javax.swing.JTextField();
        lblFax = new javax.swing.JLabel();
        txtFax = new javax.swing.JTextField();
        mnuBar = new javax.swing.JMenuBar();
        mnuFiltra = new javax.swing.JMenu();
        mnuTutti = new javax.swing.JCheckBoxMenuItem();
        mnuNome = new javax.swing.JCheckBoxMenuItem();
        mnuPiva = new javax.swing.JCheckBoxMenuItem();
        mnuCodFisc = new javax.swing.JCheckBoxMenuItem();
        mnuStampa = new javax.swing.JMenu();
        mnuProspetto = new javax.swing.JMenuItem();
        mnuSelezionato = new javax.swing.JMenuItem();

        setTitle("Anagrafica Fornitori/Clienti");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblFornitori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblFornitori);

        btnNuovo.setText("Nuovo");
        btnNuovo.setToolTipText("Inserisci un nuovo fornitore");
        btnNuovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuovoActionPerformed(evt);
            }
        });

        btnSalva.setText("Salva");
        btnSalva.setToolTipText("Salva il nuovo fornitore");
        btnSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvaActionPerformed(evt);
            }
        });

        btnElimina.setText("Elimina");
        btnElimina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminaActionPerformed(evt);
            }
        });

        btnModPiva.setText("Modifica P.Iva");
        btnModPiva.setEnabled(false);
        btnModPiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModPivaActionPerformed(evt);
            }
        });

        pnlRef1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Referente 1", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lblNomeRef1.setText("Nome");

        lblEmailRef1.setText("E-Mail");

        lblTelRef1.setText("Telefono");

        txtNomeRef1.setNextFocusableComponent(txtEmailRef1);

        txtEmailRef1.setNextFocusableComponent(txtTelRef1);

        txtTelRef1.setNextFocusableComponent(txtNomeRef2);

        javax.swing.GroupLayout pnlRef1Layout = new javax.swing.GroupLayout(pnlRef1);
        pnlRef1.setLayout(pnlRef1Layout);
        pnlRef1Layout.setHorizontalGroup(
            pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRef1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTelRef1)
                    .addComponent(lblEmailRef1)
                    .addComponent(lblNomeRef1))
                .addGap(28, 28, 28)
                .addGroup(pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEmailRef1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeRef1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelRef1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        pnlRef1Layout.setVerticalGroup(
            pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRef1Layout.createSequentialGroup()
                .addGroup(pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeRef1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomeRef1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmailRef1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmailRef1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRef1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelRef1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelRef1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlRef2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Referente 2", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lblNomeRef2.setText("Nome");

        lblEmailRef2.setText("E-Mail");

        lblTelRef2.setText("Telefono");

        txtNomeRef2.setNextFocusableComponent(txtEmailRef2);

        txtEmailRef2.setNextFocusableComponent(txtTelRef2);

        javax.swing.GroupLayout pnlRef2Layout = new javax.swing.GroupLayout(pnlRef2);
        pnlRef2.setLayout(pnlRef2Layout);
        pnlRef2Layout.setHorizontalGroup(
            pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRef2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTelRef2)
                    .addComponent(lblEmailRef2)
                    .addComponent(lblNomeRef2))
                .addGap(28, 28, 28)
                .addGroup(pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEmailRef2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeRef2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelRef2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        pnlRef2Layout.setVerticalGroup(
            pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRef2Layout.createSequentialGroup()
                .addGroup(pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeRef2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomeRef2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEmailRef2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmailRef2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRef2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelRef2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelRef2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlDati.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Dati Generali", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        lblCap.setText("CAP");
        lblCap.setToolTipText("");

        lblEmail.setText("E-Mail");
        lblEmail.setToolTipText("");

        txtProv.setNextFocusableComponent(txtNazione);

        lblCitta.setText("Città");
        lblCitta.setToolTipText("");

        txtEmail.setNextFocusableComponent(txtIndirizzo);

        lblNazione.setText("Nazione");
        lblNazione.setToolTipText("");

        txtBanca.setNextFocusableComponent(txtIban);

        txtPIva.setNextFocusableComponent(txtCodFisc);

        lblCodFisc.setText("Codice Fiscale");

        lblIban.setText("IBAN");
        lblIban.setToolTipText("");

        lblTit.setText("di");
        lblTit.setToolTipText("");

        txtIban.setNextFocusableComponent(txtTelefono1);

        txtCodFisc.setNextFocusableComponent(txtBanca);

        txtIndirizzo.setNextFocusableComponent(txtCap);

        lblNome.setText("Nome");
        lblNome.setToolTipText("");

        txtNazione.setNextFocusableComponent(txtNomeRef1);

        lblBanca.setText("Banca");

        lblTel1.setText("Telefono 1");
        lblTel1.setToolTipText("");

        txtTelefono1.setNextFocusableComponent(txtTelefono2);

        lblProvi.setText("Provincia");
        lblProvi.setToolTipText("");

        txtNome.setNextFocusableComponent(txtTitolare);

        txtCap.setNextFocusableComponent(txtCitta);

        txtCod.setEnabled(false);

        lblID.setText("Cod.");
        lblID.setToolTipText("");

        lblPIva.setText("Partita IVA");

        lblIndirizzo.setText("Indirizzo");
        lblIndirizzo.setToolTipText("");

        txtTitolare.setNextFocusableComponent(txtPIva);

        txtCitta.setNextFocusableComponent(txtProv);

        lblTel2.setText("Telefono 2");
        lblTel2.setToolTipText("");

        txtTelefono2.setNextFocusableComponent(txtFax);

        lblFax.setText("Fax");
        lblFax.setToolTipText("");

        txtFax.setNextFocusableComponent(txtEmail);

        javax.swing.GroupLayout pnlDatiLayout = new javax.swing.GroupLayout(pnlDati);
        pnlDati.setLayout(pnlDatiLayout);
        pnlDatiLayout.setHorizontalGroup(
            pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTel1)
                    .addComponent(lblIban, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(lblBanca, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(lblCodFisc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPIva, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNome, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(lblTel2)
                    .addComponent(lblFax))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtTelefono1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIban, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBanca, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCodFisc, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPIva, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCod, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelefono2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFax, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(39, 39, 39)
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlDatiLayout.createSequentialGroup()
                        .addComponent(lblTit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtTitolare, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDatiLayout.createSequentialGroup()
                        .addComponent(lblEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDatiLayout.createSequentialGroup()
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCitta, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNazione, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblProvi, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblCap, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIndirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCitta, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProv, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCap, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIndirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNazione, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pnlDatiLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtEmail, txtTitolare});

        pnlDatiLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblEmail, lblTit});

        pnlDatiLayout.setVerticalGroup(
            pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNome)
                    .addComponent(lblTit)
                    .addComponent(txtTitolare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPIva))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatiLayout.createSequentialGroup()
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodFisc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCodFisc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBanca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBanca))
                        .addGap(7, 7, 7)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIban, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIban))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefono1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelefono2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFax)))
                    .addGroup(pnlDatiLayout.createSequentialGroup()
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIndirizzo)
                            .addComponent(txtIndirizzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCap)
                            .addComponent(txtCap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCitta)
                            .addComponent(txtCitta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProvi)
                            .addComponent(txtProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNazione)
                            .addComponent(txtNazione, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16))
        );

        mnuFiltra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtra.png"))); // NOI18N
        mnuFiltra.setText("Filtra");

        mnuTutti.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        mnuTutti.setSelected(true);
        mnuTutti.setText("Mostra tutti");
        mnuTutti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/mostratutto.png"))); // NOI18N
        mnuTutti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTuttiActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuTutti);

        mnuNome.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNome.setSelected(true);
        mnuNome.setText("Per Nome");
        mnuNome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pernome.png"))); // NOI18N
        mnuNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNomeActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuNome);

        mnuPiva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mnuPiva.setSelected(true);
        mnuPiva.setText("Per Partita IVA");
        mnuPiva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtropiva.png"))); // NOI18N
        mnuPiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPivaActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuPiva);

        mnuCodFisc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnuCodFisc.setSelected(true);
        mnuCodFisc.setText("Per Codice fiscale");
        mnuCodFisc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtrocodfisc.png"))); // NOI18N
        mnuCodFisc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCodFiscActionPerformed(evt);
            }
        });
        mnuFiltra.add(mnuCodFisc);

        mnuBar.add(mnuFiltra);

        mnuStampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampa.setText("Stampa");

        mnuProspetto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuProspetto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/prospetto.png"))); // NOI18N
        mnuProspetto.setText("Prospetto");
        mnuProspetto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuProspettoActionPerformed(evt);
            }
        });
        mnuStampa.add(mnuProspetto);

        mnuSelezionato.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSelezionato.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fornclienti_menu.png"))); // NOI18N
        mnuSelezionato.setText("Selezionato");
        mnuSelezionato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelezionatoActionPerformed(evt);
            }
        });
        mnuStampa.add(mnuSelezionato);

        mnuBar.add(mnuStampa);

        setJMenuBar(mnuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1206, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlDati, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pnlRef2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlRef1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNuovo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnElimina))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnModPiva, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSalva))))
                .addGap(98, 98, 98))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnElimina, btnModPiva, btnNuovo, btnSalva});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlRef1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlRef2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNuovo)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnSalva, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(29, 29, 29)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnModPiva)
                                        .addComponent(btnElimina))))))
                    .addComponent(pnlDati, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnElimina, btnNuovo});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnModPiva, btnSalva});

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1111)/2, (screenSize.height-656)/2, 1111, 656);
    }// </editor-fold>//GEN-END:initComponents
/*
 * Questo metodo costruisce e popola una tabella con i valori presenti nel parametro. 
 */
private void popolaTabella(List fornitori) {
    fornitoriInTabella = fornitori;
    Object[] arForn = fornitori.toArray();
    Object[][] arrayFornitori = new Object[arForn.length][Fornitore.NUM_CAMPI];
    
    int contForn = 0;
    for (Object forn : arForn) {
        arrayFornitori[contForn++] = ((Fornitore) forn).toArray();
    }
    
    DefaultTableModel tm = new javax.swing.table.DefaultTableModel(
        arrayFornitori,
            
        new String [] {
            "COD.", "NOME", "TITOLARE", "P. IVA", "COD. FISCALE", "BANCA", "IBAN", "TELEFONO 1", "TELEFONO 2", "FAX",
                "EMAIL", "INDIRIZZO", "CAP", "CITTA'" , "PROV.", "NAZIONE"
            }
        ) 
    
        {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            final Class[] TYPES = {
                Integer.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class,
                String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class
            
            };
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return TYPES[columnIndex];
            }
                        
        };
    
    /*
     * Costruzione della tabella
     */
    tblFornitori.setModel(tm);
    tblFornitori.setRowSorter(new TableRowSorter(tm));
    
        //Le seguenti costanti indicano i numeri di colonna dei campi
        final int COD = 0;
        final int NOME = 1;
        final int TITOLARE = 2;
        final int PIVA = 3;
        final int CODFISC = 4;
        final int BANCA = 5;
        final int IBAN = 6;
        final int TEL1 = 7;
        final int TEL2 = 8;
        final int FAX = 9;
        final int EMAIL = 10;
        final int INDIRIZZO = 11;
        final int CAP = 12;
        final int CITTA = 13;
        final int PROV = 14;
        final int NAZIONE = 15;        
    
        jScrollPane1.setViewportView(tblFornitori);
        tblFornitori.getColumnModel().getColumn(COD).setResizable(false);
        tblFornitori.getColumnModel().getColumn(NOME).setResizable(true);
        tblFornitori.getColumnModel().getColumn(TITOLARE).setResizable(true);
        tblFornitori.getColumnModel().getColumn(PIVA).setResizable(false);
        tblFornitori.getColumnModel().getColumn(CODFISC).setResizable(false);
        tblFornitori.getColumnModel().getColumn(INDIRIZZO).setResizable(true);
        tblFornitori.getColumnModel().getColumn(TEL1).setResizable(false);
        tblFornitori.getColumnModel().getColumn(TEL2).setResizable(false);
        tblFornitori.getColumnModel().getColumn(FAX).setResizable(false);
        tblFornitori.getColumnModel().getColumn(EMAIL).setResizable(true);
        tblFornitori.getColumnModel().getColumn(CAP).setResizable(false);
        tblFornitori.getColumnModel().getColumn(CITTA).setResizable(true);
        tblFornitori.getColumnModel().getColumn(PROV).setResizable(true);
        tblFornitori.getColumnModel().getColumn(NAZIONE).setResizable(true);
        tblFornitori.getColumnModel().getColumn(BANCA).setResizable(true);
        tblFornitori.getColumnModel().getColumn(IBAN).setResizable(false);

        //Imposta la larghezza dei singoli campi
        tblFornitori.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblFornitori.getColumnModel().getColumn(COD).setPreferredWidth(70);
        tblFornitori.getColumnModel().getColumn(NOME).setPreferredWidth(400);
        tblFornitori.getColumnModel().getColumn(TITOLARE).setPreferredWidth(100);
        tblFornitori.getColumnModel().getColumn(PIVA).setPreferredWidth(100);
        tblFornitori.getColumnModel().getColumn(CODFISC).setPreferredWidth(100);
        tblFornitori.getColumnModel().getColumn(INDIRIZZO).setPreferredWidth(170);
        tblFornitori.getColumnModel().getColumn(TEL1).setPreferredWidth(90);
        tblFornitori.getColumnModel().getColumn(TEL2).setPreferredWidth(90);
        tblFornitori.getColumnModel().getColumn(FAX).setPreferredWidth(90);
        tblFornitori.getColumnModel().getColumn(EMAIL).setPreferredWidth(100);
        tblFornitori.getColumnModel().getColumn(CAP).setPreferredWidth(45);
        tblFornitori.getColumnModel().getColumn(CITTA).setPreferredWidth(70);
        tblFornitori.getColumnModel().getColumn(PROV).setPreferredWidth(30);
        tblFornitori.getColumnModel().getColumn(NAZIONE).setPreferredWidth(70);
        tblFornitori.getColumnModel().getColumn(BANCA).setPreferredWidth(100);
        tblFornitori.getColumnModel().getColumn(IBAN).setPreferredWidth(210);
        
        tblFornitori.getTableHeader().setReorderingAllowed(false); //Fa in modo che l'utente non possa modificare l'ordine delle colonne
        tblFornitori.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        
        /*
         * Aggiunge un evento alla tabella. In particolare, al click su una cella della tabella,
         * visualizza i valori corrispondenti ai campi della riga selezionata nelle rispettive text.
         */
        tblFornitori.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent me) {
                //Estrae dalla tabella i valori dei relativi campi
                int cod = (Integer) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), COD);
                String nome = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), NOME);
                String titolare = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), TITOLARE);
                String piva = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), PIVA);
                String codfisc = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), CODFISC);
                String indirizzo = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), INDIRIZZO);
                String tel1 = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), TEL1);
                String tel2 = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), TEL2);
                String fax = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), FAX);
                String email = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), EMAIL);
                String cap = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), CAP);
                String citta = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), CITTA);
                String prov = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), PROV);
                String nazione = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), NAZIONE);
                String banca = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), BANCA);
                String iban = (String) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), IBAN);
                String nomeRef1 = fornitoriInTabella.get(getIndexSelectedFattura()).getNomeRef1();
                String nomeRef2 = fornitoriInTabella.get(getIndexSelectedFattura()).getNomeRef2();
                String emailRef1 = fornitoriInTabella.get(getIndexSelectedFattura()).getEmailRef1();
                String emailRef2 = fornitoriInTabella.get(getIndexSelectedFattura()).getEmailRef2();
                String telRef1 = fornitoriInTabella.get(getIndexSelectedFattura()).getTelRef1();
                String telRef2 = fornitoriInTabella.get(getIndexSelectedFattura()).getTelRef2();
                   
                //Imposta le text con i valori estratti dalla tabella
                txtCod.setText(Integer.toString(cod));
                txtNome.setText(nome);
                txtTitolare.setText(titolare);
                txtPIva.setText(piva);
                txtCodFisc.setText(codfisc);
                txtIndirizzo.setText(indirizzo);
                txtTelefono1.setText(tel1);
                txtTelefono2.setText(tel2);
                txtFax.setText(fax);
                txtEmail.setText(email);
                txtBanca.setText(banca);
                txtIban.setText(iban);
                txtCap.setText(cap);
                txtCitta.setText(citta);
                txtProv.setText(prov);
                txtNazione.setText(nazione);
                txtNomeRef1.setText(nomeRef1);
                txtNomeRef2.setText(nomeRef2);
                txtEmailRef1.setText(emailRef1);
                txtEmailRef2.setText(emailRef2);
                txtTelRef1.setText(telRef1);
                txtTelRef2.setText(telRef2);
                
                btnModPiva.setEnabled(true);
            }
            
        });
 }   
    
    /**
     * Questo metodo, che corrisponde all'evento che si innesca con l'apertura del frame, recupera l'elenco di tutti i fornitori e
     * popola una tabella con questo elenco.
     */
private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    mnuNome.setState(false);
    mnuCodFisc.setState(false);
    mnuPiva.setState(false);
    mnuTutti.setState(true);
    txtNome.requestFocus();
    List<Entity> fornitori = FrontController.getAnagrafe(Fornitore.class);
    popolaTabella(fornitori);
    patternRicerca = null;
}//GEN-LAST:event_formWindowOpened
/**
 * Questo evento si verifica alla pressione del tasto di eliminazione.
 * @param evt 
 */
private void btnEliminaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminaActionPerformed
// TODO add your handling code here:
        String cod = txtCod.getText();
        /*
         * Cerca di convertire il valore dell'id estratto dalla text in un intero. Se non ci riesce,
         * vuol dire che non è stata selezionata alcuna riga. Quindi è impossibile eliminare una riga
         */
        try {
            Integer COD = Integer.parseInt(cod);
            
            /*
             * Viene mostrato un messagio di conferma eliminazione. Se l'utente accetta
             * si cerca di eliminare il fornitore corrispondente all'id selezionato.
             */
            final int RESPONSE = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler procedere con l'eliminazione?", "Conferma eliminazione", JOptionPane.OK_CANCEL_OPTION);
            if (RESPONSE == JOptionPane.OK_OPTION) {
                Fornitore fornitore = new Fornitore(COD);
                
                //Viene mostrato un messaggio a seconda dell'esito dell'operazione
                if (FrontController.delete(fornitore))
                    JOptionPane.showMessageDialog(null, "Eliminazione eseguita con successo!", "", JOptionPane.INFORMATION_MESSAGE);
                else
                    JOptionPane.showMessageDialog(null, "Si è verificato un errore durante l'eliminazione", "Errore" ,JOptionPane.ERROR_MESSAGE);
    
                if (mnuNome.isSelected())
                    visualizzaDati("nome", patternRicerca);
                else if (mnuPiva.isSelected())
                    visualizzaDati("piva", patternRicerca);
                else if (mnuCodFisc.isSelected())
                    visualizzaDati("codfisc", patternRicerca);
                else {
                    visualizzaDati(null, null);
                }
                
                pulisciText();
            }
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Seleziona una riga da eliminare!", "Attenzione", JOptionPane.WARNING_MESSAGE);
        }
}//GEN-LAST:event_btnEliminaActionPerformed

/*
 * Controlla che l'email rispetti il formato consueto.
 */
private boolean checkEmail(String email) {
    if (email.isEmpty())
        return true;
    
    Pattern pattern = Pattern.compile(".+@.+\\.[a-z]+");
    Matcher match = pattern.matcher(email);
    return match.matches();
}

/**
 * Questo evento si verifica alla pressione del tasto per il salvataggio.
 * @param evt 
 */
private void btnSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvaActionPerformed
    // TODO add your handling code here:
    String cod = txtCod.getText();
    String nome = txtNome.getText();
    String titolare = txtTitolare.getText();
    String piva = txtPIva.getText();
    String codfisc = txtCodFisc.getText();
    String indirizzo = txtIndirizzo.getText();
    String telefono1 = txtTelefono1.getText();
    String telefono2 = txtTelefono2.getText();
    String fax = txtFax.getText();
    String email = txtEmail.getText();
    String cap = txtCap.getText();
    String citta = txtCitta.getText();
    String prov = txtProv.getText().toUpperCase();
    String nazione = txtNazione.getText();
    String banca = txtBanca.getText();
    String iban = txtIban.getText().toUpperCase();
    String nomeRef1 = txtNomeRef1.getText();
    String nomeRef2 = txtNomeRef2.getText();
    String emailRef1 = txtEmailRef1.getText();
    String emailRef2 = txtEmailRef2.getText();
    String telRef1 = txtTelRef1.getText();
    String telRef2 = txtTelRef2.getText();

    
    Integer COD = null;
    try {
        COD = Integer.parseInt(cod);
        
    } catch (NumberFormatException e) {}
        
    /*
     * Vengono effettuati dei controlli sui valori inseriti, mostrando degli opportuni messaggi nel caso in cui
     * tali valori non rispettano il formato corretto.
     */
    boolean checkData=true;
    if (piva.isEmpty() && codfisc.isEmpty()){
        JOptionPane.showMessageDialog(null, "Inserire la Partita IVA o il Codice fiscale!", "Campo obbligatorio mancante", JOptionPane.ERROR_MESSAGE);
        checkData=false;
        
    } else { 
        if (!piva.isEmpty() && piva.length() != 11){
            JOptionPane.showMessageDialog(null, "La Partita IVA deve contenere 11 cifre!", "Campo obbligatorio errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        } 
        
        if (!codfisc.isEmpty() && codfisc.length() != 11) {
            JOptionPane.showMessageDialog(null, "Il codice fiscale deve contenere 11 cifre!", "Campo obbligatorio errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        }
        
        if (!checkEmail(email)) {
            JOptionPane.showMessageDialog(null, "Inserire l'E-Mail nel formato corretto!", "Formato errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        }
        
        if (!checkEmail(emailRef1)) {
            JOptionPane.showMessageDialog(null, "Inserire l'E-Mail del referente 1 nel formato corretto!", "Formato errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        }
        
        if (!checkEmail(emailRef2)) {
            JOptionPane.showMessageDialog(null, "Inserire l'E-Mail del referente 2 nel formato corretto!", "Formato errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        }
        
        if (!cap.isEmpty() && cap.length() != 5) {
            JOptionPane.showMessageDialog(null, "Il CAP deve contenere 5 cifre!", "Formato errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        }
        
        if (!iban.isEmpty() && iban.length() != 27) {
            JOptionPane.showMessageDialog(null, "Il codice IBAN deve contenere 27 cifre!", "Formato errato", JOptionPane.ERROR_MESSAGE);
            checkData=false;
        }
    } 
    
    /*
     * Se i campi non contengono errori di formato, si cerca di inserire un nuovo fornitore, o di aggiornare 
     * un fornitore esistente, rispettivamente se non è stata selezionata alcuna riga, o è stata selezionata una 
     * riga della tabella.
     */
    if (checkData){
        Fornitore fornitore = new Fornitore(COD, nome, titolare, piva, codfisc, indirizzo, telefono1, telefono2, fax, email, cap, citta, prov, nazione, banca, iban,
                nomeRef1, nomeRef2, emailRef1, emailRef2, telRef1, telRef2);
        
        /*
         * Se l'id è != null vuol dire che è stata selezionata una riga dalla tabella, quindi si cerca di 
         * aggiornare i campi rispettivi, altrimenti vuol dire che non è stata selezionata alcuna riga. In 
         * questo caso si cerca di inserire una nuova riga.
         */
        if (COD != null) {
            final int RESPONSE = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler procedere con la modifica?", "Conferma modifica", JOptionPane.OK_CANCEL_OPTION);
            if (RESPONSE == JOptionPane.OK_OPTION) {
                try {
                    if (FrontController.update(fornitore))
                        JOptionPane.showMessageDialog(null, "Modifica eseguita con successo!", "", JOptionPane.INFORMATION_MESSAGE);
                    else
                        JOptionPane.showMessageDialog(null, "Si è verificato un errore durante la modifica", "Errore" ,JOptionPane.ERROR_MESSAGE);
                
                } catch (EccezioneChiaveDuplicata e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                
                } catch (EccezioneValoreCampoTroppoLungo e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                }
            }
        
        } else {
            final int RESPONSE = JOptionPane.showConfirmDialog(null, "Sei sicuro di voler procedere con l'inserimento?", "Conferma inserimento", JOptionPane.OK_CANCEL_OPTION);
            if (RESPONSE == JOptionPane.OK_OPTION) {
                try {
                    if (FrontController.insert(fornitore))
                        JOptionPane.showMessageDialog(null, "Inserimento eseguito con successo!", "", JOptionPane.INFORMATION_MESSAGE);
                    else
                        JOptionPane.showMessageDialog(null, "Si è verificato un errore durante l'inserimento", "Errore" ,JOptionPane.ERROR_MESSAGE);
                
                } catch (EccezioneChiaveDuplicata e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                } catch (EccezioneValoreCampoTroppoLungo e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        if (mnuNome.isSelected())
            visualizzaDati("nome", patternRicerca);
        else if (mnuPiva.isSelected())
            visualizzaDati("piva", patternRicerca);
        else if (mnuCodFisc.isSelected())
            visualizzaDati("codfisc", patternRicerca);
        else {
            visualizzaDati(null, null);
        }
            
        
        pulisciText();
    } 
    
}//GEN-LAST:event_btnSalvaActionPerformed

/**
 * Questo evento si verifica alla pressione del tasto Nuovo
 */
private void btnNuovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuovoActionPerformed
// TODO add your handling code here:
    pulisciText();
    txtNome.requestFocus();
    
}//GEN-LAST:event_btnNuovoActionPerformed

private void mnuNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNomeActionPerformed
// TODO add your handling code here:
    String nome = JOptionPane.showInputDialog(null, "Inserire il Nome del fornitore/cliente da cercare:");
    patternRicerca = nome;
    visualizzaDati("nome", nome);
}//GEN-LAST:event_mnuNomeActionPerformed

private void mnuPivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPivaActionPerformed
// TODO add your handling code here:
    String piva = JOptionPane.showInputDialog(null, "Inserire la Partita IVA del fornitore/cliente da cercare:");
    patternRicerca = piva;
    visualizzaDati("piva", piva);
}//GEN-LAST:event_mnuPivaActionPerformed

/*
 * Ricevuto in ingresso il tipo di ordinamento da effettuare, richiama dal FrontController la tipologia di ordinamento
 * e popola la tabella con i risultati relativi.
 */
//private void visualizzaOrderedBy(String type) {
//    pulisciText();
//    mnuNome.setState(false);
//    mnuCodFisc.setState(false);
//    mnuPiva.setState(false);
//    mnuTutti.setState(true);
//    List<Fornitore> fornitori=null;
//    if (type.equalsIgnoreCase("nome")) {
//        fornitori = FrontController.orderFornitori(Fornitore.RIC_NOME);
//        mnuOrdNome.setState(true);
//        mnuOrdCodFisc.setState(false);
//        mnuOrdPIva.setState(false);
//    } else if (type.equalsIgnoreCase("piva")) {
//        fornitori = FrontController.orderFornitori(Fornitore.RIC_PIVA);
//        mnuOrdNome.setState(false);
//        mnuOrdCodFisc.setState(false);
//        mnuOrdPIva.setState(true);
//    } else if (type.equalsIgnoreCase("codfisc")) {
//        fornitori = FrontController.orderFornitori(Fornitore.RIC_CODFISC);
//        mnuOrdNome.setState(false);
//        mnuOrdCodFisc.setState(true);
//        mnuOrdPIva.setState(false);
//    }
//    
//    if (fornitori != null) {
//        popolaTabella(fornitori);
//    }
//}

/*
 * Parametrizza la visualizzazione dei dati, viene richiamato a seguito della selezione del Menu, riceve in input il
 * tipo della ricerca e il pattern da ricercare ed effettua la ricerca e la relativa visualizzazione dei dati.
 */
private void visualizzaDati(String type, String pattern) {
//    mnuOrdNome.setState(true);
//    mnuOrdPIva.setState(false);
//    mnuOrdCodFisc.setState(false);
    pulisciText();
    List<Fornitore> fornitori = new ArrayList<Fornitore>();
    
    if (type == null) {
        Object[] forn = FrontController.getAnagrafe(Fornitore.class).toArray();
        for (Object f : forn) {
            fornitori.add((Fornitore) f);
        }
        popolaTabella(fornitori);
        mnuNome.setState(false);
        mnuCodFisc.setState(false);
        mnuPiva.setState(false);
        mnuTutti.setState(true);
        
    } else if (type.equalsIgnoreCase("nome")) {
        if (pattern != null) {
            fornitori = FrontController.getFornitori(Fornitore.RIC_NOME, pattern);
            if (fornitori != null) {
                popolaTabella(fornitori);
                mnuNome.setState(true);
                mnuCodFisc.setState(false);
                mnuPiva.setState(false);
                mnuTutti.setState(false);
            } else {
                JOptionPane.showMessageDialog(null, "Si è verificato un errore imprevisto durante la ricerca", "Errore" ,JOptionPane.ERROR_MESSAGE);
                mnuNome.setState(false);
            }
            
        } else {
            mnuNome.setState(false);
        }
        
    } else if (type.equalsIgnoreCase("piva")) {
        if (pattern != null) {
            fornitori = FrontController.getFornitori(Fornitore.RIC_PIVA, pattern);
            if (fornitori != null) {
                popolaTabella(fornitori);
                mnuNome.setState(false);
                mnuCodFisc.setState(false);
                mnuPiva.setState(true);
                mnuTutti.setState(false);
            } else {
                JOptionPane.showMessageDialog(null, "Si è verificato un errore imprevisto durante la ricerca", "Errore" ,JOptionPane.ERROR_MESSAGE);
                mnuPiva.setState(false);
            }
        } else {
            mnuPiva.setState(false);
        }
        
    } else if (type.equalsIgnoreCase("codfisc")) {
        if (pattern != null) {
            fornitori = FrontController.getFornitori(Fornitore.RIC_CODFISC, pattern);
            if (fornitori != null) {
                popolaTabella(fornitori);
                mnuNome.setState(false);
                mnuCodFisc.setState(true);
                mnuPiva.setState(false);
                mnuTutti.setState(false);
            } else {
                JOptionPane.showMessageDialog(null, "Si è verificato un errore imprevisto durante la ricerca", "Errore" ,JOptionPane.ERROR_MESSAGE);
                mnuCodFisc.setState(false);
            }
        } else {
            mnuCodFisc.setState(false);
        }
    } 
        
    //Predispone le text per la modifica se la ricerca produce un solo risultato.
    if (fornitori.size() == 1) {
        Fornitore uniqueResult = fornitori.get(0);
        txtCod.setText(String.valueOf(uniqueResult.getCod()));
        txtNome.setText(uniqueResult.getNome());
        txtTitolare.setText(uniqueResult.getTitolare());
        txtPIva.setText(uniqueResult.getPiva());
        txtCodFisc.setText(uniqueResult.getCodfiscale());
        txtEmail.setText(uniqueResult.getEmail());
        txtIndirizzo.setText(uniqueResult.getIndirizzo());
        txtTelefono1.setText(uniqueResult.getTelefono1());
        txtTelefono2.setText(uniqueResult.getTelefono2());
        txtFax.setText(uniqueResult.getFax());
        txtCap.setText(uniqueResult.getCap());
        txtCitta.setText(uniqueResult.getCitta());
        txtProv.setText(uniqueResult.getProv());
        txtNazione.setText(uniqueResult.getNazione());
        txtBanca.setText(uniqueResult.getBanca());
        txtIban.setText(uniqueResult.getIban());
        txtNomeRef1.setText(uniqueResult.getNomeRef1());
        txtNomeRef2.setText(uniqueResult.getNomeRef2());
        txtEmailRef1.setText(uniqueResult.getEmailRef1());
        txtEmailRef2.setText(uniqueResult.getEmailRef2());
        txtTelRef1.setText(uniqueResult.getTelRef1());
        txtTelRef2.setText(uniqueResult.getTelRef2());
        
        txtNome.requestFocus();
    }
    
}    

private void mnuCodFiscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCodFiscActionPerformed
// TODO add your handling code here:
    String codfisc = JOptionPane.showInputDialog(null, "Inserire il Codice fiscale del fornitore/cliente da cercare:");
    patternRicerca = codfisc;
    visualizzaDati("codfisc", codfisc);
}//GEN-LAST:event_mnuCodFiscActionPerformed

private void mnuTuttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTuttiActionPerformed
// TODO add your handling code here:
    formWindowOpened(null);
    patternRicerca = null;
}//GEN-LAST:event_mnuTuttiActionPerformed

private void btnModPivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModPivaActionPerformed
// TODO add your handling code here:
    boolean ok = false;
    String newPiva = null;
    while (!ok) {
        newPiva = JOptionPane.showInputDialog("Stai per creare un nuovo fornitore mantenendo i dati selezionati. Inserisci la nuova Partita IVA per continuare");
        ok = true;
        if (newPiva != null) {
            if (newPiva.length()!=11){
                JOptionPane.showMessageDialog(rootPane, "La Partita IVA deve contenere 11 valori");
                ok = false;
            } else {
                String nome = txtNome.getText();
                String titolare = txtTitolare.getText();
                String codfisc = newPiva;
                String indirizzo = txtIndirizzo.getText();
                String telefono1 = txtTelefono1.getText();
                String telefono2 = txtTelefono2.getText();
                String fax = txtFax.getText();
                String email = txtEmail.getText();
                String cap = txtCap.getText();
                String citta = txtCitta.getText();
                String prov = txtProv.getText().toUpperCase();
                String nazione = txtNazione.getText();
                String banca = txtBanca.getText();
                String iban = txtIban.getText().toUpperCase();
                String nomeRef1 = txtNomeRef1.getText();
                String nomeRef2 = txtNomeRef2.getText();
                String emailRef1 = txtEmailRef1.getText();
                String emailRef2 = txtEmailRef2.getText();
                String telRef1 = txtTelRef1.getText();
                String telRef2 = txtTelRef2.getText();
    
                Fornitore fornitore = new Fornitore(null, nome, titolare, newPiva, codfisc, indirizzo, telefono1, telefono2, fax, email, cap, citta, prov, nazione, banca, iban,
                        nomeRef1, nomeRef2, emailRef1, emailRef2, telRef1, telRef2);
                try {
                    if (FrontController.insert(fornitore)) {
                        JOptionPane.showMessageDialog(null, "Inserimento eseguito con successo!", "", JOptionPane.INFORMATION_MESSAGE);
                        formWindowOpened(null);
                    } else
                        JOptionPane.showMessageDialog(null, "Si è verificato un errore durante l'inserimento", "Errore" ,JOptionPane.ERROR_MESSAGE);
                    
                } catch (EccezioneChiaveDuplicata e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                } catch (EccezioneValoreCampoTroppoLungo e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Errore" ,JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
}//GEN-LAST:event_btnModPivaActionPerformed

private void mnuProspettoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuProspettoActionPerformed
// TODO add your handling code here:
    try {
        new StampaAnagrafica(fornitoriInTabella).printAndOpen();
        
    } catch (DocumentException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_mnuProspettoActionPerformed

private void mnuSelezionatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelezionatoActionPerformed
// TODO add your handling code here:
    if (tblFornitori.getSelectedRow() == -1) {
        JOptionPane.showMessageDialog(null, "Seleziona una riga da stampare!", "Attenzione", JOptionPane.WARNING_MESSAGE);
    } else {
        try {
            new StampaAnagrafica(fornitoriInTabella.get(getIndexSelectedFattura())).printAndOpen();

        } catch (DocumentException ex) {
            Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}//GEN-LAST:event_mnuSelezionatoActionPerformed

/*
 * Azzera le text
 */
private void pulisciText() {
    txtCod.setText(null);
    txtNome.setText(null);
    txtTitolare.setText(null);
    txtPIva.setText(null);
    txtCodFisc.setText(null);
    txtTelefono1.setText(null);
    txtTelefono2.setText(null);
    txtFax.setText(null);
    txtCap.setText(null);
    txtCitta.setText(null);
    txtProv.setText(null);
    txtNazione.setText(null);
    txtBanca.setText(null);
    txtIban.setText(null);
    txtIndirizzo.setText(null);
    txtEmail.setText(null);
    txtNomeRef1.setText(null);
    txtNomeRef2.setText(null);
    txtEmailRef1.setText(null);
    txtEmailRef2.setText(null);
    txtTelRef1.setText(null);
    txtTelRef2.setText(null);
}

private int getIndexSelectedFattura() {
    Fornitore forn = new Fornitore();
    forn.setCod((Integer) tblFornitori.getValueAt(tblFornitori.getSelectedRow(), 0));

    return fornitoriInTabella.indexOf(forn);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnElimina;
    private javax.swing.JButton btnModPiva;
    private javax.swing.JButton btnNuovo;
    private javax.swing.JButton btnSalva;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBanca;
    private javax.swing.JLabel lblCap;
    private javax.swing.JLabel lblCitta;
    private javax.swing.JLabel lblCodFisc;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmailRef1;
    private javax.swing.JLabel lblEmailRef2;
    private javax.swing.JLabel lblFax;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblIban;
    private javax.swing.JLabel lblIndirizzo;
    private javax.swing.JLabel lblNazione;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNomeRef1;
    private javax.swing.JLabel lblNomeRef2;
    private javax.swing.JLabel lblPIva;
    private javax.swing.JLabel lblProvi;
    private javax.swing.JLabel lblTel1;
    private javax.swing.JLabel lblTel2;
    private javax.swing.JLabel lblTelRef1;
    private javax.swing.JLabel lblTelRef2;
    private javax.swing.JLabel lblTit;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JCheckBoxMenuItem mnuCodFisc;
    private javax.swing.JMenu mnuFiltra;
    private javax.swing.JCheckBoxMenuItem mnuNome;
    private javax.swing.JCheckBoxMenuItem mnuPiva;
    private javax.swing.JMenuItem mnuProspetto;
    private javax.swing.JMenuItem mnuSelezionato;
    private javax.swing.JMenu mnuStampa;
    private javax.swing.JCheckBoxMenuItem mnuTutti;
    private javax.swing.JPanel pnlDati;
    private javax.swing.JPanel pnlRef1;
    private javax.swing.JPanel pnlRef2;
    private javax.swing.JTable tblFornitori;
    private javax.swing.JTextField txtBanca;
    private javax.swing.JTextField txtCap;
    private javax.swing.JTextField txtCitta;
    private javax.swing.JTextField txtCod;
    private javax.swing.JTextField txtCodFisc;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmailRef1;
    private javax.swing.JTextField txtEmailRef2;
    private javax.swing.JTextField txtFax;
    private javax.swing.JTextField txtIban;
    private javax.swing.JTextField txtIndirizzo;
    private javax.swing.JTextField txtNazione;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeRef1;
    private javax.swing.JTextField txtNomeRef2;
    private javax.swing.JTextField txtPIva;
    private javax.swing.JTextField txtProv;
    private javax.swing.JTextField txtTelRef1;
    private javax.swing.JTextField txtTelRef2;
    private javax.swing.JTextField txtTelefono1;
    private javax.swing.JTextField txtTelefono2;
    private javax.swing.JTextField txtTitolare;
    // End of variables declaration//GEN-END:variables
    
    private String patternRicerca = null; //Indica qual'è il pattern utilizzato per l'ultima ricerca. Se == null vuol dire che il sistema mostra l'intero elenco
    private List<Fornitore> fornitoriInTabella = new LinkedList<Fornitore>();
}
