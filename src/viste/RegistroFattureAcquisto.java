/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegistroFattureEmesse.java
 *
 * Created on 30-mag-2012, 20.17.33
 */
package viste;

import libs.DoubleFormatter;
import com.itextpdf.text.DocumentException;
import connection.Tabelle;
import controllo.FrontController;
import entita.Entity;
import entita.Fattura;
import entita.Fornitore;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Date;
import java.util.Calendar;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import libs.Utility;
import stampa.StampaRegistroAcquisto;


/**
 *
 * @author Michele
 */
public class RegistroFattureAcquisto extends javax.swing.JFrame {
    
    private class FattureTableModel extends DefaultTableModel {
        
        //private final String[] COLONNE;
        private final boolean[] CAN_EDIT;
        private final Class[] types;
        
        public FattureTableModel(Object[][] righe, String[] colonne, Class[] tps, boolean[] edit) {
            super(righe, colonne);
            //COLONNE = colonne;
            CAN_EDIT = edit;
            types = tps;
        }
 
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return CAN_EDIT[columnIndex];
        }
        
         @Override
        public Class getColumnClass(int columnIndex) {
            return this.types[columnIndex];
        }
        
        @Override
        public void setValueAt(Object aValue, int row, int column) {
            super.setValueAt(aValue, row, column);
            
            if (column == PAGATA) {
                char valPagata = (Character) aValue;
                Fattura fattura = fattureInTabella.get(getIndexSelectedFattura());
                if (valPagata == 'S') {
                    FrontController.open(new NotePagamento(vista, rootPaneCheckingEnabled, fattura));
                } else {
                    FrontController.updatePagataFattura(Fattura.tipo.ACQ, fattura, false);
                    setFatture();
                }
                
            }
                        
        }
        
        
    }

    /** Creates new form RegistroFattureEmesse */
    public RegistroFattureAcquisto() {
        initComponents();
        ColorManager color = new ColorManager();
        color.changeColor(pnlAnno);
        color.changeColor(pnlFornitore);
        color.changeColor(pnlImpTot);
        color.changeColor(pnlIvaTot);
        color.changeColor(pnlMesi);
        color.changeColor(pnlNumFatt);
        color.changeColor(pnlPagate);
        color.changeColor(pnlRiepilogo);
        color.changeColor(pnlScadute);
        color.changeColor(pnlTipo);
        color.changeColor(pnlTotFatture);
        color.changeColor(pnlTotNonPagate);
        color.changeColor(pnlTotPagate);
        
        chkMesi = new javax.swing.JCheckBox[]{
            chkGennaio, chkFebbraio, chkMarzo, chkAprile, chkMaggio, chkGiugno, chkLuglio, chkAgosto, chkSett, chkOtt, chkNov, chkDic
        };
        vista = this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        pnlAnno = new javax.swing.JPanel();
        cboAnno = new javax.swing.JComboBox();
        pnlRiepilogo = new javax.swing.JPanel();
        pnlNumFatt = new javax.swing.JPanel();
        txtNumFatt = new javax.swing.JTextField();
        pnlImpTot = new javax.swing.JPanel();
        txtTotImp = new javax.swing.JTextField();
        pnlIvaTot = new javax.swing.JPanel();
        txtIvaTot = new javax.swing.JTextField();
        pnlTotFatture = new javax.swing.JPanel();
        txtTotFatture = new javax.swing.JTextField();
        pnlTotNonPagate = new javax.swing.JPanel();
        txtTotNonPagate = new javax.swing.JTextField();
        pnlTotPagate = new javax.swing.JPanel();
        txtTotPagate = new javax.swing.JTextField();
        pnlPagate = new javax.swing.JPanel();
        optTutte = new javax.swing.JRadioButton();
        optPagate = new javax.swing.JRadioButton();
        optNonPagate = new javax.swing.JRadioButton();
        pnlMesi = new javax.swing.JPanel();
        chkTutti = new javax.swing.JCheckBox();
        chkMarzo = new javax.swing.JCheckBox();
        chkGennaio = new javax.swing.JCheckBox();
        chkFebbraio = new javax.swing.JCheckBox();
        chkAprile = new javax.swing.JCheckBox();
        chkMaggio = new javax.swing.JCheckBox();
        chkGiugno = new javax.swing.JCheckBox();
        chkLuglio = new javax.swing.JCheckBox();
        chkAgosto = new javax.swing.JCheckBox();
        chkSett = new javax.swing.JCheckBox();
        chkOtt = new javax.swing.JCheckBox();
        chkNov = new javax.swing.JCheckBox();
        chkDic = new javax.swing.JCheckBox();
        pnlFornitore = new javax.swing.JPanel();
        cboFornitore = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFatture = new javax.swing.JTable();
        pnlTipo = new javax.swing.JPanel();
        optTerzi = new javax.swing.JRadioButton();
        optPolizze = new javax.swing.JRadioButton();
        optNCred = new javax.swing.JRadioButton();
        optNDeb = new javax.swing.JRadioButton();
        optStipendi = new javax.swing.JRadioButton();
        optVarie = new javax.swing.JRadioButton();
        optRicevute = new javax.swing.JRadioButton();
        optTipoTutte = new javax.swing.JRadioButton();
        optManutenzione = new javax.swing.JRadioButton();
        optRifornimenti = new javax.swing.JRadioButton();
        optAcqStrutture = new javax.swing.JRadioButton();
        pnlScadute = new javax.swing.JPanel();
        optTutteScad = new javax.swing.JRadioButton();
        optScadute = new javax.swing.JRadioButton();
        optNonScadute = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFattura = new javax.swing.JMenu();
        mnuInsFatt = new javax.swing.JMenuItem();
        mnuModFattura = new javax.swing.JMenuItem();
        mnuEliminaFattura = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnuIntervalloDate = new javax.swing.JCheckBoxMenuItem();
        mnuFilterDataPagamento = new javax.swing.JMenuItem();
        mnuProspetto = new javax.swing.JMenu();
        mnuStampaCompleta = new javax.swing.JMenuItem();
        mnuStampaParziale = new javax.swing.JMenuItem();
        mnuStampaPrimaNota = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar2.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar2.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro Fatture Acquisto");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlAnno.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Anno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        cboAnno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAnnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAnnoLayout = new javax.swing.GroupLayout(pnlAnno);
        pnlAnno.setLayout(pnlAnnoLayout);
        pnlAnnoLayout.setHorizontalGroup(
            pnlAnnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnnoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboAnno, 0, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAnnoLayout.setVerticalGroup(
            pnlAnnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnnoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pnlRiepilogo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        pnlNumFatt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "NÂ° Fatture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtNumFatt.setEnabled(false);

        javax.swing.GroupLayout pnlNumFattLayout = new javax.swing.GroupLayout(pnlNumFatt);
        pnlNumFatt.setLayout(pnlNumFattLayout);
        pnlNumFattLayout.setHorizontalGroup(
            pnlNumFattLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNumFattLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNumFatt, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlNumFattLayout.setVerticalGroup(
            pnlNumFattLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNumFattLayout.createSequentialGroup()
                .addComponent(txtNumFatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlImpTot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Imponibile", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotImp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotImp.setEnabled(false);

        javax.swing.GroupLayout pnlImpTotLayout = new javax.swing.GroupLayout(pnlImpTot);
        pnlImpTot.setLayout(pnlImpTotLayout);
        pnlImpTotLayout.setHorizontalGroup(
            pnlImpTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlImpTotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotImp, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlImpTotLayout.setVerticalGroup(
            pnlImpTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImpTotLayout.createSequentialGroup()
                .addComponent(txtTotImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlIvaTot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Iva", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtIvaTot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtIvaTot.setEnabled(false);

        javax.swing.GroupLayout pnlIvaTotLayout = new javax.swing.GroupLayout(pnlIvaTot);
        pnlIvaTot.setLayout(pnlIvaTotLayout);
        pnlIvaTotLayout.setHorizontalGroup(
            pnlIvaTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIvaTotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtIvaTot, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlIvaTotLayout.setVerticalGroup(
            pnlIvaTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIvaTotLayout.createSequentialGroup()
                .addComponent(txtIvaTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotFatture.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Fatture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotFatture.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotFatture.setEnabled(false);

        javax.swing.GroupLayout pnlTotFattureLayout = new javax.swing.GroupLayout(pnlTotFatture);
        pnlTotFatture.setLayout(pnlTotFattureLayout);
        pnlTotFattureLayout.setHorizontalGroup(
            pnlTotFattureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotFattureLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotFatture, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTotFattureLayout.setVerticalGroup(
            pnlTotFattureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotFattureLayout.createSequentialGroup()
                .addComponent(txtTotFatture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotNonPagate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Non pagate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotNonPagate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotNonPagate.setEnabled(false);

        javax.swing.GroupLayout pnlTotNonPagateLayout = new javax.swing.GroupLayout(pnlTotNonPagate);
        pnlTotNonPagate.setLayout(pnlTotNonPagateLayout);
        pnlTotNonPagateLayout.setHorizontalGroup(
            pnlTotNonPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotNonPagateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotNonPagate, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTotNonPagateLayout.setVerticalGroup(
            pnlTotNonPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotNonPagateLayout.createSequentialGroup()
                .addComponent(txtTotNonPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotPagate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Pagate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotPagate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotPagate.setEnabled(false);

        javax.swing.GroupLayout pnlTotPagateLayout = new javax.swing.GroupLayout(pnlTotPagate);
        pnlTotPagate.setLayout(pnlTotPagateLayout);
        pnlTotPagateLayout.setHorizontalGroup(
            pnlTotPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotPagateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotPagate, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTotPagateLayout.setVerticalGroup(
            pnlTotPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotPagateLayout.createSequentialGroup()
                .addComponent(txtTotPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlRiepilogoLayout = new javax.swing.GroupLayout(pnlRiepilogo);
        pnlRiepilogo.setLayout(pnlRiepilogoLayout);
        pnlRiepilogoLayout.setHorizontalGroup(
            pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRiepilogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNumFatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlImpTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlIvaTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTotFatture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTotPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTotNonPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRiepilogoLayout.setVerticalGroup(
            pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRiepilogoLayout.createSequentialGroup()
                .addGroup(pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTotFatture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlNumFatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlImpTot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlIvaTot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlTotPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlTotNonPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pnlPagate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pagate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        optTutte.setSelected(true);
        optTutte.setText("Tutte");
        optTutte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTutteActionPerformed(evt);
            }
        });

        optPagate.setText("Pagate");
        optPagate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optPagateActionPerformed(evt);
            }
        });

        optNonPagate.setText("Non Pagate");
        optNonPagate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optNonPagateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPagateLayout = new javax.swing.GroupLayout(pnlPagate);
        pnlPagate.setLayout(pnlPagateLayout);
        pnlPagateLayout.setHorizontalGroup(
            pnlPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optPagate)
                    .addComponent(optTutte)
                    .addComponent(optNonPagate))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        pnlPagateLayout.setVerticalGroup(
            pnlPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagateLayout.createSequentialGroup()
                .addComponent(optTutte)
                .addGap(17, 17, 17)
                .addComponent(optPagate)
                .addGap(18, 18, 18)
                .addComponent(optNonPagate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMesi.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mesi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        chkTutti.setSelected(true);
        chkTutti.setText("Tutti");
        chkTutti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTuttiActionPerformed(evt);
            }
        });

        chkMarzo.setSelected(true);
        chkMarzo.setText("Marzo");
        chkMarzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMarzoActionPerformed(evt);
            }
        });

        chkGennaio.setSelected(true);
        chkGennaio.setText("Gennaio");
        chkGennaio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGennaioActionPerformed(evt);
            }
        });

        chkFebbraio.setSelected(true);
        chkFebbraio.setText("Febbraio");
        chkFebbraio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFebbraioActionPerformed(evt);
            }
        });

        chkAprile.setSelected(true);
        chkAprile.setText("Aprile");
        chkAprile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAprileActionPerformed(evt);
            }
        });

        chkMaggio.setSelected(true);
        chkMaggio.setText("Maggio");
        chkMaggio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMaggioActionPerformed(evt);
            }
        });

        chkGiugno.setSelected(true);
        chkGiugno.setText("Giugno");
        chkGiugno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGiugnoActionPerformed(evt);
            }
        });

        chkLuglio.setSelected(true);
        chkLuglio.setText("Luglio");
        chkLuglio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLuglioActionPerformed(evt);
            }
        });

        chkAgosto.setSelected(true);
        chkAgosto.setText("Agosto");
        chkAgosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAgostoActionPerformed(evt);
            }
        });

        chkSett.setSelected(true);
        chkSett.setText("Settembre");
        chkSett.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSettActionPerformed(evt);
            }
        });

        chkOtt.setSelected(true);
        chkOtt.setText("Ottobre");
        chkOtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOttActionPerformed(evt);
            }
        });

        chkNov.setSelected(true);
        chkNov.setText("Novembre");
        chkNov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNovActionPerformed(evt);
            }
        });

        chkDic.setSelected(true);
        chkDic.setText("Dicembre");
        chkDic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMesiLayout = new javax.swing.GroupLayout(pnlMesi);
        pnlMesi.setLayout(pnlMesiLayout);
        pnlMesiLayout.setHorizontalGroup(
            pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkTutti)
                .addGap(18, 18, 18)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMarzo)
                    .addComponent(chkGennaio)
                    .addComponent(chkFebbraio))
                .addGap(18, 18, 18)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkGiugno)
                    .addComponent(chkAprile)
                    .addComponent(chkMaggio))
                .addGap(26, 26, 26)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSett)
                    .addComponent(chkLuglio)
                    .addComponent(chkAgosto))
                .addGap(18, 18, 18)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDic)
                    .addComponent(chkOtt)
                    .addComponent(chkNov))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMesiLayout.setVerticalGroup(
            pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMesiLayout.createSequentialGroup()
                        .addComponent(chkOtt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkNov)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDic))
                    .addGroup(pnlMesiLayout.createSequentialGroup()
                        .addComponent(chkLuglio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkAgosto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkSett))
                    .addGroup(pnlMesiLayout.createSequentialGroup()
                        .addComponent(chkAprile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMaggio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkGiugno))
                    .addGroup(pnlMesiLayout.createSequentialGroup()
                        .addComponent(chkGennaio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkTutti)
                            .addComponent(chkFebbraio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkMarzo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlFornitore.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Fornitore", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        cboFornitore.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tutti i fornitori" }));
        cboFornitore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFornitoreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFornitoreLayout = new javax.swing.GroupLayout(pnlFornitore);
        pnlFornitore.setLayout(pnlFornitoreLayout);
        pnlFornitoreLayout.setHorizontalGroup(
            pnlFornitoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFornitoreLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboFornitore, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlFornitoreLayout.setVerticalGroup(
            pnlFornitoreLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFornitoreLayout.createSequentialGroup()
                .addComponent(cboFornitore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblFatture.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblFatture);

        pnlTipo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tipo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        optTerzi.setText("Terzi");
        optTerzi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTerziActionPerformed(evt);
            }
        });

        optPolizze.setText("Polizze");
        optPolizze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optPolizzeActionPerformed(evt);
            }
        });

        optNCred.setText("Note Cred.");
        optNCred.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optNCredActionPerformed(evt);
            }
        });

        optNDeb.setText("Note Deb.");
        optNDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optNDebActionPerformed(evt);
            }
        });

        optStipendi.setText("Stipendi");
        optStipendi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optStipendiActionPerformed(evt);
            }
        });

        optVarie.setText("Varie");
        optVarie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optVarieActionPerformed(evt);
            }
        });

        optRicevute.setText("Ricevute");
        optRicevute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optRicevuteActionPerformed(evt);
            }
        });

        optTipoTutte.setSelected(true);
        optTipoTutte.setText("Tutte");
        optTipoTutte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTipoTutteActionPerformed(evt);
            }
        });

        optManutenzione.setText("Manutenz.");
        optManutenzione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optManutenzioneActionPerformed(evt);
            }
        });

        optRifornimenti.setText("Riforn.");
        optRifornimenti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optRifornimentiActionPerformed(evt);
            }
        });

        optAcqStrutture.setText("Acq. str.");
        optAcqStrutture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optAcqStruttureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTipoLayout = new javax.swing.GroupLayout(pnlTipo);
        pnlTipo.setLayout(pnlTipoLayout);
        pnlTipoLayout.setHorizontalGroup(
            pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTipoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTipoLayout.createSequentialGroup()
                        .addComponent(optTipoTutte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optNCred)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optStipendi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optRicevute))
                    .addGroup(pnlTipoLayout.createSequentialGroup()
                        .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optTerzi)
                            .addComponent(optManutenzione))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optRifornimenti)
                            .addComponent(optPolizze))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optAcqStrutture)
                            .addGroup(pnlTipoLayout.createSequentialGroup()
                                .addComponent(optNDeb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(optVarie)))))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        pnlTipoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {optNCred, optNDeb, optPolizze, optRicevute, optStipendi, optTerzi, optTipoTutte, optVarie});

        pnlTipoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {optAcqStrutture, optManutenzione, optRifornimenti});

        pnlTipoLayout.setVerticalGroup(
            pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTipoLayout.createSequentialGroup()
                .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optTipoTutte, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTipoLayout.createSequentialGroup()
                        .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(optNCred)
                            .addComponent(optStipendi)
                            .addComponent(optRicevute))
                        .addGap(3, 3, 3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optTerzi, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(optPolizze)
                        .addComponent(optVarie)
                        .addComponent(optNDeb)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optManutenzione, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(optAcqStrutture)
                        .addComponent(optRifornimenti))))
        );

        pnlScadute.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scadute", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        optTutteScad.setSelected(true);
        optTutteScad.setText("Tutte");
        optTutteScad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTutteScadActionPerformed(evt);
            }
        });

        optScadute.setText("Scadute");
        optScadute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optScaduteActionPerformed(evt);
            }
        });

        optNonScadute.setText("Non Scadute");
        optNonScadute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optNonScaduteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlScaduteLayout = new javax.swing.GroupLayout(pnlScadute);
        pnlScadute.setLayout(pnlScaduteLayout);
        pnlScaduteLayout.setHorizontalGroup(
            pnlScaduteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScaduteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScaduteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optScadute)
                    .addComponent(optTutteScad)
                    .addComponent(optNonScadute))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlScaduteLayout.setVerticalGroup(
            pnlScaduteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScaduteLayout.createSequentialGroup()
                .addComponent(optTutteScad)
                .addGap(16, 16, 16)
                .addComponent(optScadute)
                .addGap(18, 18, 18)
                .addComponent(optNonScadute)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mnuFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emettifattura.png"))); // NOI18N
        mnuFattura.setText("Fattura");

        mnuInsFatt.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        mnuInsFatt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/modifica.png"))); // NOI18N
        mnuInsFatt.setText("Inserisci nuova");
        mnuInsFatt.setToolTipText("");
        mnuInsFatt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInsFattActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuInsFatt);

        mnuModFattura.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mnuModFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/modifica.png"))); // NOI18N
        mnuModFattura.setText("Modifica selezionata");
        mnuModFattura.setEnabled(false);
        mnuModFattura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuModFatturaActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuModFattura);

        mnuEliminaFattura.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mnuEliminaFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancella.png"))); // NOI18N
        mnuEliminaFattura.setText("Elimina selezionata");
        mnuEliminaFattura.setEnabled(false);
        mnuEliminaFattura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEliminaFatturaActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuEliminaFattura);

        jMenuBar1.add(mnuFattura);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtra.png"))); // NOI18N
        jMenu3.setText("Filtra");

        mnuIntervalloDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mnuIntervalloDate.setText("Per intervallo date");
        mnuIntervalloDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/intervallodate.png"))); // NOI18N
        mnuIntervalloDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIntervalloDateActionPerformed(evt);
            }
        });
        jMenu3.add(mnuIntervalloDate);

        mnuFilterDataPagamento.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuFilterDataPagamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/intervallodate.png"))); // NOI18N
        mnuFilterDataPagamento.setText("Per intervallo data pagamento");
        mnuFilterDataPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFilterDataPagamentoActionPerformed(evt);
            }
        });
        jMenu3.add(mnuFilterDataPagamento);

        jMenuBar1.add(jMenu3);

        mnuProspetto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/prospetto.png"))); // NOI18N
        mnuProspetto.setText("Prospetto");
        mnuProspetto.setEnabled(false);

        mnuStampaCompleta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuStampaCompleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampaCompleta.setText("Stampa completa");
        mnuStampaCompleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStampaCompletaActionPerformed(evt);
            }
        });
        mnuProspetto.add(mnuStampaCompleta);

        mnuStampaParziale.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuStampaParziale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampaParziale.setText("Stampa parziale");
        mnuStampaParziale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStampaParzialeActionPerformed(evt);
            }
        });
        mnuProspetto.add(mnuStampaParziale);

        mnuStampaPrimaNota.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuStampaPrimaNota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampaPrimaNota.setText("Stampa prima nota");
        mnuStampaPrimaNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStampaPrimaNotaActionPerformed(evt);
            }
        });
        mnuProspetto.add(mnuStampaPrimaNota);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        jMenuItem1.setText("Stampa cliente");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        mnuProspetto.add(jMenuItem1);

        jMenuBar1.add(mnuProspetto);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pnlFornitore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pnlTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlScadute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlMesi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlRiepilogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1243, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {pnlAnno, pnlPagate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(pnlRiepilogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pnlPagate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(pnlFornitore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnlScadute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlMesi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void chkMaggioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMaggioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkMaggioActionPerformed

private void chkDicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDicActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkDicActionPerformed

private void optTutteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTutteActionPerformed
// TODO add your handling code here:
    optNonPagate.setSelected(false);
    optPagate.setSelected(false);
    optTutte.setSelected(true);
    setFatture();
}//GEN-LAST:event_optTutteActionPerformed

private void optPagateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optPagateActionPerformed
// TODO add your handling code here:
    optNonPagate.setSelected(false);
    optTutte.setSelected(false);
    optPagate.setSelected(true);
    setFatture();
}//GEN-LAST:event_optPagateActionPerformed

private void optNonPagateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optNonPagateActionPerformed
// TODO add your handling code here:
    optPagate.setSelected(false);
    optTutte.setSelected(false);
    optNonPagate.setSelected(true);
    setFatture();
}//GEN-LAST:event_optNonPagateActionPerformed

private void chkTuttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTuttiActionPerformed
// TODO add your handling code here:
    for (javax.swing.JCheckBox mese : chkMesi){
        mese.setSelected(chkTutti.isSelected());
    }
    dataFinale = null;
    dataIniziale = null;
    mnuIntervalloDate.setSelected(false);
    setFatture();
}//GEN-LAST:event_chkTuttiActionPerformed

private void chkGennaioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGennaioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkGennaioActionPerformed

private void chkFebbraioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFebbraioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkFebbraioActionPerformed

private void chkMarzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMarzoActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkMarzoActionPerformed

private void chkAprileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAprileActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkAprileActionPerformed

private void chkGiugnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGiugnoActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkGiugnoActionPerformed

private void chkLuglioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLuglioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkLuglioActionPerformed

private void chkAgostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAgostoActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkAgostoActionPerformed

private void chkSettActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSettActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkSettActionPerformed

private void chkOttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOttActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkOttActionPerformed

private void chkNovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNovActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkNovActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    List<Entity> fornitori = FrontController.getAnagrafe(Fornitore.class);
    List<Integer> anni = FrontController.getAnniEsercizio(Fattura.tipo.ACQ);
    popolaSelect(fornitori);
    popolaSelect(anni);
        
}//GEN-LAST:event_formWindowOpened

private void cboFornitoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFornitoreActionPerformed
// TODO add your handling code here:
    setFatture();
}//GEN-LAST:event_cboFornitoreActionPerformed

private void cboAnnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAnnoActionPerformed
// TODO add your handling code here:
    dataFinale = null;
    dataIniziale = null;
    mnuIntervalloDate.setSelected(false);
    setFatture();
}//GEN-LAST:event_cboAnnoActionPerformed

private void mnuInsFattActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInsFattActionPerformed
// TODO add your handling code here:
    FrontController.open(new InsFatturaAcquisto(this, rootPaneCheckingEnabled));
}//GEN-LAST:event_mnuInsFattActionPerformed

private void optTutteScadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTutteScadActionPerformed
// TODO add your handling code here
    optNonScadute.setSelected(false);
    optScadute.setSelected(false);
    optTutteScad.setSelected(true);
    setFatture();
}//GEN-LAST:event_optTutteScadActionPerformed

private void optScaduteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optScaduteActionPerformed
// TODO add your handling code here:
    optNonScadute.setSelected(false);
    optTutteScad.setSelected(false);
    optScadute.setSelected(true);
    setFatture();
}//GEN-LAST:event_optScaduteActionPerformed

private void optNonScaduteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optNonScaduteActionPerformed
// TODO add your handling code here:
    optTutteScad.setSelected(false);
    optScadute.setSelected(false);
    optNonScadute.setSelected(true);
    setFatture();
}//GEN-LAST:event_optNonScaduteActionPerformed

private void optTipoTutteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTipoTutteActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optTipoTutte.setSelected(true);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optVarie.setSelected(false);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    tipoFatt = "all";
    setFatture();       
}//GEN-LAST:event_optTipoTutteActionPerformed

private void optNCredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optNCredActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(true);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(false);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    tipoFatt = "Note Credito";
    setFatture();
}//GEN-LAST:event_optNCredActionPerformed

private void optStipendiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optStipendiActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optRicevute.setSelected(false);
    optStipendi.setSelected(true);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(false);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    tipoFatt = "Stipendi";
    setFatture();
}//GEN-LAST:event_optStipendiActionPerformed

private void optRicevuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optRicevuteActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optRicevute.setSelected(true);
    optStipendi.setSelected(false);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(false);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    tipoFatt = "Ricevute";
    setFatture();
}//GEN-LAST:event_optRicevuteActionPerformed

private void optTerziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTerziActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(true);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(false);
    tipoFatt = "Terzi";
    setFatture();
}//GEN-LAST:event_optTerziActionPerformed

private void optPolizzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optPolizzeActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(true);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(false);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    tipoFatt = "Polizze";
    setFatture();
}//GEN-LAST:event_optPolizzeActionPerformed

private void optNDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optNDebActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(true);
    optPolizze.setSelected(false);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(false);
    tipoFatt = "Note Debito";
    setFatture();
}//GEN-LAST:event_optNDebActionPerformed

private void optVarieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optVarieActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optTipoTutte.setSelected(false);
    optVarie.setSelected(true);
    optAcqStrutture.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    tipoFatt = "Varie";
    setFatture();
}//GEN-LAST:event_optVarieActionPerformed

private void mnuIntervalloDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIntervalloDateActionPerformed
// TODO add your handling code here:
    dbDateFieldToFilter = Tabelle.Fatture.DATA;
    dateFilter();
}//GEN-LAST:event_mnuIntervalloDateActionPerformed

private boolean dateFilter(){
    boolean okDate = false;
    java.util.Calendar currentime = Calendar.getInstance();
    dataIniziale = null;
    dataFinale = new Date((currentime.getTime()).getTime()); //data odierna
   
    /*
     * Il ciclo viene ripetuto fino a quando viene inserita una data nel formato corretto, oppure
     * fino a quando l'utente non decide di annullare l'operazione di filtraggio.
     */
    while (!okDate) {
        String dataI;
        try {
            /*
             * Il ciclo viene ripetuto fino a quando l'utente continua a cliccare ok sull'input senza
             * inserire alcun valore.
             */
            while ((dataI = JOptionPane.showInputDialog(rootPane, "Inserisci la data iniziale")).isEmpty());
            
        } catch (NullPointerException e) { //L'utente ha premuto annulla sull'input dialog
            mnuIntervalloDate.setSelected(false);
            return false;
        }
    
        if (!checkData(dataI)) //Il formato della data inserita dall'utente, non Ã¨ gg/mm/aaaa
            JOptionPane.showMessageDialog(rootPane, "Inserisci la data nel formato gg/mm/aaaa", "Formato errato", JOptionPane.ERROR_MESSAGE);
        
        else { //Il formato Ã¨ corretto
            String splitted[] = dataI.split("\\/");
            String giorno = splitted[0];
            String mese = splitted[1];
            String anno = splitted[2];
                        
            try {
                dataIniziale = Utility.dateValueOf(anno, mese, giorno, "data iniziale");
                okDate = true;
                
            } catch (IllegalArgumentException e) { //Il valore inserito per la data non Ã¨ valido, perchÃ© non esiste. Per esempio si inserisce 13 come mese
                JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Formato errato", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }
    
    okDate = false;
    
    //Come quello di cui sopra
    while (!okDate) {
        String dataF = JOptionPane.showInputDialog(rootPane, "Inserisci la data finale oppure premi OK se vuoi utilizzare la data odierna.");
        if (dataF == null) { //L'utente ha premuto annulla sull'input dialog
            mnuIntervalloDate.setSelected(false);
            return false;
        }
        
        if (!(dataF.isEmpty())) { //La data inserita non Ã¨ la stringa vuota
            if (!checkData(dataF)) //Il formato della data inserita dall'utente, non Ã¨ gg/mm/aaaa
                JOptionPane.showMessageDialog(rootPane, "Inserisci la data nel formato gg/mm/aaaa", "Formato errato", JOptionPane.ERROR_MESSAGE);
            
            else { //Il formato Ã¨ corretto
                String splitted[] = dataF.split("\\/");
                String giorno = splitted[0];
                String mese = splitted[1];
                String anno = splitted[2];
                                
                try {
                    dataFinale = Utility.dateValueOf(anno, mese, giorno, "data finale");
                    okDate = true;
                    
                } catch (IllegalArgumentException e) { //Il valore inserito per la data non Ã¨ valido, perchÃ© non esiste. Per esempio si inserisce 13 come mese
                    JOptionPane.showMessageDialog(rootPane, e.getMessage(), "Formato errato", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        } else //L'utente non ha inserito alcuna data, quindi viene considerata la data odierna come data finale
            okDate = true;
   }
   if (okDate) {
       for (javax.swing.JCheckBox c : chkMesi){
           c.setSelected(false);
       }
       chkTutti.setSelected(false);
       setFatture();
       return okDate;
   }
   return false;
}

private void optManutenzioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optManutenzioneActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optTipoTutte.setSelected(true);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optVarie.setSelected(false);
    optRifornimenti.setSelected(false);
    optAcqStrutture.setSelected(false);
    optTipoTutte.setSelected(false);
    tipoFatt = "Manutenzione";
    setFatture();       
}//GEN-LAST:event_optManutenzioneActionPerformed

private void optRifornimentiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optRifornimentiActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optTipoTutte.setSelected(true);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optVarie.setSelected(false);
    optManutenzione.setSelected(false);
    optAcqStrutture.setSelected(false);
    optTipoTutte.setSelected(false);
    tipoFatt = "Rifornimenti";
    setFatture();       
}//GEN-LAST:event_optRifornimentiActionPerformed

private void optAcqStruttureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optAcqStruttureActionPerformed
// TODO add your handling code here:
    optTerzi.setSelected(false);
    optNCred.setSelected(false);
    optNDeb.setSelected(false);
    optPolizze.setSelected(false);
    optTipoTutte.setSelected(true);
    optRicevute.setSelected(false);
    optStipendi.setSelected(false);
    optVarie.setSelected(false);
    optRifornimenti.setSelected(false);
    optManutenzione.setSelected(false);
    optTipoTutte.setSelected(false);
    tipoFatt = "Acq. strutture";
    setFatture();       
}//GEN-LAST:event_optAcqStruttureActionPerformed

private void Stampa(int type, Object[] riepilogo) {
    Fattura.pagata filtroP;
    if (optPagate.isSelected())
        filtroP = Fattura.pagata.P;
    else if (optNonPagate.isSelected())
        filtroP = Fattura.pagata.NP;
    else
        filtroP = Fattura.pagata.ALL;
    
    Fattura.scaduta filtroS;
    if (optScadute.isSelected())
        filtroS = Fattura.scaduta.S;
    else if (optNonScadute.isSelected())
        filtroS = Fattura.scaduta.NS;
    else
        filtroS = Fattura.scaduta.ALL;
    
    Fornitore fornitore = null;
    if (cboFornitore.getSelectedIndex() > 0)
        fornitore = (Fornitore) cboFornitore.getSelectedItem();
    
    List<String> mesi = new LinkedList<String>();
    for (int i = 0; i < chkMesi.length; i++)
        if (chkMesi[i].isSelected())
            mesi.add(meseToString(i + 1));
    
    try {
        if (mnuIntervalloDate.isSelected())
            new StampaRegistroAcquisto(dataIniziale, dataFinale, filtroP, filtroS, fornitore, riepilogo, mesi, fattureInTabella, tipoFatt, type).printAndOpen();
        else
            new StampaRegistroAcquisto((Integer)cboAnno.getSelectedItem(), filtroP, filtroS, fornitore, riepilogo, mesi, fattureInTabella, tipoFatt, type).printAndOpen();
        
    } catch (DocumentException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private void mnuStampaCompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStampaCompletaActionPerformed
// TODO add your handling code here:
    Object[] riepilogo = {
        Integer.parseInt(txtNumFatt.getText()), Double.parseDouble(txtTotImp.getText()), Double.parseDouble(txtIvaTot.getText()),
        Double.parseDouble(txtTotFatture.getText()), Double.parseDouble(txtTotPagate.getText()), Double.parseDouble(txtTotNonPagate.getText())
    };
    
    Stampa(StampaRegistroAcquisto.COMPLETA, riepilogo);
}//GEN-LAST:event_mnuStampaCompletaActionPerformed

private void mnuModFatturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuModFatturaActionPerformed
// TODO add your handling code here:
    FrontController.open(new InsFatturaAcquisto(this, rootPaneCheckingEnabled, fattureInTabella.get(getIndexSelectedFattura())));
}//GEN-LAST:event_mnuModFatturaActionPerformed

private void mnuEliminaFatturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEliminaFatturaActionPerformed
// TODO add your handling code here:
    
    final int RESPONSE = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler eliminare la fattura selezionata?",
            "Conferma eliminazione fattura", JOptionPane.OK_CANCEL_OPTION);
    
    if (RESPONSE == JOptionPane.OK_OPTION) {
        if (FrontController.delete(fattureInTabella.get(getIndexSelectedFattura()))) {
            setFatture();
            JOptionPane.showMessageDialog(this, "Eliminazione effettuata con successo!", "", JOptionPane.INFORMATION_MESSAGE);
            //fattureInTabella.remove(getIndexSelectedFattura());
        } else 
            JOptionPane.showMessageDialog(this, "Si Ã¨ verificato un errore durante l'eliminazione della fattura!", "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    
}//GEN-LAST:event_mnuEliminaFatturaActionPerformed

private void mnuStampaParzialeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStampaParzialeActionPerformed
// TODO add your handling code here:
    Object[] riepilogo = {
        Integer.parseInt(txtNumFatt.getText()),Double.parseDouble(txtTotFatture.getText()), 
        Double.parseDouble(txtTotPagate.getText()), Double.parseDouble(txtTotNonPagate.getText())
    };
    
    Stampa(StampaRegistroAcquisto.PARZIALE, riepilogo);
}//GEN-LAST:event_mnuStampaParzialeActionPerformed

private void mnuFilterDataPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFilterDataPagamentoActionPerformed
// TODO add your handling code here:
    dbDateFieldToFilter = Tabelle.Fatture.PAGAMENTO;
    dateFilter();
}//GEN-LAST:event_mnuFilterDataPagamentoActionPerformed

private void mnuStampaPrimaNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStampaPrimaNotaActionPerformed
// TODO add your handling code here:
    
    Object[] riepilogo = {
        Integer.parseInt(txtNumFatt.getText()),Double.parseDouble(txtTotFatture.getText())
    };
    
    Stampa(StampaRegistroAcquisto.PRIMA_NOTA, riepilogo);
}//GEN-LAST:event_mnuStampaPrimaNotaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        Object[] riepilogo = {
             Integer.parseInt(txtNumFatt.getText()),Double.parseDouble(txtTotFatture.getText()), 
             Double.parseDouble(txtTotPagate.getText()), Double.parseDouble(txtTotNonPagate.getText())
         };

         Stampa(StampaRegistroAcquisto.CLIENTE, riepilogo);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

private String meseToString(int mese) {
    String stringa = null;
    switch (mese) {
        case 1: stringa = "Gennaio"; break;
        case 2: stringa = "Febbraio"; break;
        case 3: stringa = "Marzo"; break;
        case 4: stringa = "Aprile"; break;
        case 5: stringa = "Maggio"; break;
        case 6: stringa = "Giugno"; break;
        case 7: stringa = "Luglio"; break;
        case 8: stringa = "Agosto"; break;
        case 9: stringa = "Settembre"; break;
        case 10: stringa = "Ottobre"; break;
        case 11: stringa = "Novembre"; break;
        case 12: stringa = "Dicembre"; break;
    }
    
    return stringa;
}

private boolean checkData(String data) {
    Pattern pattern = Pattern.compile("\\d{1,2}/\\d{1,2}/\\d{2,4}");
    Matcher match = pattern.matcher(data);
    return match.matches();
      
}

/*
 * Popola la select dei fornitori.
 */
protected void popolaSelect(List items) {
    for (Object item : items)
        if (item instanceof Integer)
            cboAnno.addItem((Integer)item);
        else
            cboFornitore.addItem((Fornitore) item);

}

private void setCheckBox() {
    dataIniziale = null;
    dataFinale = null;
    mnuIntervalloDate.setSelected(false);
    int i = 0;
    for (javax.swing.JCheckBox mese : chkMesi){
        if (mese.isSelected())
            i++;
    }
    
    if (i == 12)
        chkTutti.setSelected(true);
    else 
        chkTutti.setSelected(false);
}

void updateCboAnno() {
    cboAnno.setModel(new DefaultComboBoxModel());
    List<Integer> anni = FrontController.getAnniEsercizio(Fattura.tipo.ACQ);
    popolaSelect(anni);
}

void setFatture() {

    if (cboAnno.getItemCount() == 0) {
        List<Integer> anni = FrontController.getAnniEsercizio(Fattura.tipo.ACQ);
        popolaSelect(anni);
    }
      
    final Fornitore cliente;
    if (cboFornitore.getSelectedIndex() == 0)
        cliente = new Fornitore(null);  
    else
        cliente = (Fornitore) cboFornitore.getSelectedItem();
    
    final boolean[] mesi = {
            chkGennaio.isSelected(), chkFebbraio.isSelected(), chkMarzo.isSelected(), chkAprile.isSelected(), chkMaggio.isSelected(), 
            chkGiugno.isSelected(), chkLuglio.isSelected(), chkAgosto.isSelected(), chkSett.isSelected(), chkOtt.isSelected(),
            chkNov.isSelected(), chkDic.isSelected()
    };
    
    final Fattura.pagata tipo;
    if (optTutte.isSelected())
        tipo = Fattura.pagata.ALL;
    else if (optNonPagate.isSelected())
        tipo = Fattura.pagata.NP;
    else
        tipo = Fattura.pagata.P;
    
    ProgressBar<List<Fattura>> bar = new ProgressBar<List<Fattura>>(this, new ProgressBar.Task<List<Fattura>>() {

        @Override
        public List<Fattura> execute() {
           return FrontController.getFattureAcquisto((Integer)cboAnno.getSelectedItem(), cliente, mesi, tipo, tipoFatt, dataIniziale, dataFinale, dbDateFieldToFilter);
        }
    });
    
    FrontController.open(bar);
    
    List<Fattura> fattureProvvisorie = bar.get();
    List<Fattura> fatture = new LinkedList<Fattura>();
    
    if (optScadute.isSelected()) {
        for (Fattura fattura : fattureProvvisorie)
            if (fattura.isScaduta())
                fatture.add(fattura);
        
    } else if (optNonScadute.isSelected()) {
        for (Fattura fattura : fattureProvvisorie)
            if (!fattura.isScaduta())
                fatture.add(fattura);
        
    } else {
        fatture = fattureProvvisorie;
    }
    
    fattureInTabella = fatture;
        
    if (fatture.isEmpty())
        mnuProspetto.setEnabled(false);
    else
        mnuProspetto.setEnabled(true);
    
    Object[] arFatt = fatture.toArray();
    Object[][] arrayFatt = new Object[arFatt.length][Fattura.NUM_CAMPI_ACQUISTO];
    int contFatt = 0;
    double totImponibile = 0.00;
    double totIva = 0.00;
    double totTotale = 0.00;
    double totPagate = 0.00;
    double totNonPagate = 0.00;
    for (Object fatt : arFatt) {
        arrayFatt[contFatt++] = ((Fattura) fatt).fattAcquistoToArray();
        totIva += ((Fattura) fatt).getIva();
        totTotale += ((Fattura) fatt).getTotale();
        totImponibile += ((Fattura) fatt).getImponibile();
        if (((Fattura)fatt).getPagata())
            totPagate += ((Fattura) fatt).getTotale();
        else
            totNonPagate += ((Fattura) fatt).getTotale();
    }
     
    txtNumFatt.setText(String.valueOf(contFatt));
    txtIvaTot.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totIva)));
    txtTotFatture.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totTotale)));
    txtTotImp.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totImponibile)));
    txtTotPagate.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totPagate)));
    txtTotNonPagate.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totNonPagate)));
    
    final String[] COLONNE = {
        "FORNITORE", "TIPO", "NUM. DOC", "DATA", "IMPONIBILE", "IVA", 
        "TOTALE", "MOD. PAGAMENTO", "PAGATA", "DATA PAGAMENTO", "SCADENZA", "NOTE PAGAM.", "NOTE" 
    };
    
    Class[] types = { String.class, String.class, Integer.class,
                    Object.class, Double.class, Double.class, Double.class, String.class, Character.class, Object.class, Object.class, String.class, String.class };
    
    TableModel tm = new FattureTableModel(arrayFatt, COLONNE, types, new boolean[] {
        false, false, false, false, false, false, false, false, true, false, false, false, false
    });
    tblFatture.setModel(tm);
    
    tblFatture.setRowSorter(new TableRowSorter(tm) {

        class DateComparator implements Comparator {

            @Override
            public int compare(Object o1, Object o2) {
                String[] data1_str = ((String) o1).split("/");
                String[] data2_str = ((String) o2).split("/");

                Date data1 = Date.valueOf(data1_str[2] + "-" + data1_str[1] + "-" + data1_str[0]);
                Date data2 = Date.valueOf(data2_str[2] + "-" + data2_str[1] + "-" + data2_str[0]);

                return data1.compareTo(data2);
            }
            
        }
        
        @Override
        public void sort() {
            setComparator(DATA, new DateComparator());
            setComparator(SCADENZA, new DateComparator());
            super.sort();

        }
        
    });
    
    boolean[] resizable = {
        true, true, false, false, false, false, false, false, false, false, false, true, true
    };
    
    int[] width = {
        300, 90, 100, 90, 125, 125, 125, 170, 70, 125, 125, 300, 300
    };
    
    tblFatture.getTableHeader().setReorderingAllowed(false); //Fa in modo che l'utente non possa modificare l'ordine delle colonne
        
    //Imposta la larghezza dei singoli campi
    tblFatture.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    
    for (int i = 0; i < COLONNE.length; i++) {
        TableColumn colonna = tblFatture.getColumnModel().getColumn(i);
        colonna.setResizable(resizable[i]);
        colonna.setPreferredWidth(width[i]);
    }
    
    tblFatture.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent me) {
            mnuEliminaFattura.setEnabled(true);
            mnuModFattura.setEnabled(true);
            
            if (me.getClickCount() > 1) {
                if (tblFatture.getSelectedColumn() != PAGATA) {
                    mnuModFatturaActionPerformed(null);
                    
                } 
            }
//            selected = fattureInTabella.get(getIndexSelectedFattura());
            
            //JOptionPane.showMessageDialog(rootPane,selected.getImporto());
        }

        @Override
        public void mousePressed(MouseEvent e) {
            //super.mousePressed(e);
            //mouseClicked(null);
        }

    });    
    
    tblFatture.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    Character[] valoriPagata = {'S', 'N'};
    DefaultCellEditor comboPagata = new DefaultCellEditor(new JComboBox(valoriPagata));
    comboPagata.setClickCountToStart(2);
    tblFatture.getColumnModel().getColumn(PAGATA).setCellEditor(comboPagata);
    
    //Formatta le colonne mostrando i double sempre con due cifre decimali
    tblFatture.getColumnModel().getColumn(TOTALE).setCellRenderer(new DoubleFormatter());
    tblFatture.getColumnModel().getColumn(IVA).setCellRenderer(new DoubleFormatter());
    tblFatture.getColumnModel().getColumn(IMPONIBILE).setCellRenderer(new DoubleFormatter());
    
}
    
    private int getIndexSelectedFattura() {
        Fattura fatt = new Fattura();
        //JOptionPane.showMessageDialog(rootPane, tblFatture.getSelectedRow());
        String colonnaNumero = String.valueOf(tblFatture.getValueAt(tblFatture.getSelectedRow(), NUM));
        String[] colonnaArray = colonnaNumero.split("-");
        
        fatt.setNumero(Integer.parseInt(colonnaArray[0]));
        
        try {
            fatt.setSpecificaNumero(colonnaArray[1]);
        } catch (ArrayIndexOutOfBoundsException e) {}
        
        String[] data = ((String) tblFatture.getValueAt(tblFatture.getSelectedRow(), DATA)).split("/");
        Date dataFatt = Date.valueOf(data[2] + "-" + data[1] + "-" + data[0]);
        fatt.setData(dataFatt);
        
        int index = fattureInTabella.indexOf(fatt);
        Fornitore fornitore = fattureInTabella.get(index).getCliente();
        
        
        String forn = (String) tblFatture.getValueAt(tblFatture.getSelectedRow(), FORNITORE);
        String fornit = forn;
        if (forn.indexOf(" di ") != -1)
            fornit = forn.split(" di ")[0];
        
        if (fornitore.getNome().equals(fornit)) {
            fatt.setCliente(fornitore);
            return index;
            
        } else {
            for (int i = 0; i < fattureInTabella.size(); i++)
                if (i != index) {
                    Fattura fattura = fattureInTabella.get(i);
                    if (fattura.getNumero() == fatt.getNumero() && fattura.getData().equals(fatt.getData()) && fattura.getCliente().getNome().equals(forn)) {
                        fatt.setCliente(fattura.getCliente());
                        return i;
                    }
                        
                }
            return -1;
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cboAnno;
    private javax.swing.JComboBox cboFornitore;
    private javax.swing.JCheckBox chkAgosto;
    private javax.swing.JCheckBox chkAprile;
    private javax.swing.JCheckBox chkDic;
    private javax.swing.JCheckBox chkFebbraio;
    private javax.swing.JCheckBox chkGennaio;
    private javax.swing.JCheckBox chkGiugno;
    private javax.swing.JCheckBox chkLuglio;
    private javax.swing.JCheckBox chkMaggio;
    private javax.swing.JCheckBox chkMarzo;
    private javax.swing.JCheckBox chkNov;
    private javax.swing.JCheckBox chkOtt;
    private javax.swing.JCheckBox chkSett;
    private javax.swing.JCheckBox chkTutti;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnuEliminaFattura;
    private javax.swing.JMenu mnuFattura;
    private javax.swing.JMenuItem mnuFilterDataPagamento;
    private javax.swing.JMenuItem mnuInsFatt;
    private javax.swing.JCheckBoxMenuItem mnuIntervalloDate;
    private javax.swing.JMenuItem mnuModFattura;
    private javax.swing.JMenu mnuProspetto;
    private javax.swing.JMenuItem mnuStampaCompleta;
    private javax.swing.JMenuItem mnuStampaParziale;
    private javax.swing.JMenuItem mnuStampaPrimaNota;
    private javax.swing.JRadioButton optAcqStrutture;
    private javax.swing.JRadioButton optManutenzione;
    private javax.swing.JRadioButton optNCred;
    private javax.swing.JRadioButton optNDeb;
    private javax.swing.JRadioButton optNonPagate;
    private javax.swing.JRadioButton optNonScadute;
    private javax.swing.JRadioButton optPagate;
    private javax.swing.JRadioButton optPolizze;
    private javax.swing.JRadioButton optRicevute;
    private javax.swing.JRadioButton optRifornimenti;
    private javax.swing.JRadioButton optScadute;
    private javax.swing.JRadioButton optStipendi;
    private javax.swing.JRadioButton optTerzi;
    private javax.swing.JRadioButton optTipoTutte;
    private javax.swing.JRadioButton optTutte;
    private javax.swing.JRadioButton optTutteScad;
    private javax.swing.JRadioButton optVarie;
    private javax.swing.JPanel pnlAnno;
    private javax.swing.JPanel pnlFornitore;
    private javax.swing.JPanel pnlImpTot;
    private javax.swing.JPanel pnlIvaTot;
    private javax.swing.JPanel pnlMesi;
    private javax.swing.JPanel pnlNumFatt;
    private javax.swing.JPanel pnlPagate;
    private javax.swing.JPanel pnlRiepilogo;
    private javax.swing.JPanel pnlScadute;
    private javax.swing.JPanel pnlTipo;
    private javax.swing.JPanel pnlTotFatture;
    private javax.swing.JPanel pnlTotNonPagate;
    private javax.swing.JPanel pnlTotPagate;
    private javax.swing.JTable tblFatture;
    private javax.swing.JTextField txtIvaTot;
    private javax.swing.JTextField txtNumFatt;
    private javax.swing.JTextField txtTotFatture;
    private javax.swing.JTextField txtTotImp;
    private javax.swing.JTextField txtTotNonPagate;
    private javax.swing.JTextField txtTotPagate;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JCheckBox[] chkMesi;
    private String tipoFatt = "all";
    private List<Fattura> fattureInTabella;
//    private Fattura selected = null;
    Date dataIniziale = null;
    Date dataFinale = null;
    private RegistroFattureAcquisto vista;
    private String dbDateFieldToFilter = "";
    
    private static final int FORNITORE = 0;
    private static final int TIPO = 1;
    private static final int NUM = 2;
    private static final int DATA = 3;
    private static final int IMPONIBILE = 4;
    private static final int IVA = 5;
    private static final int TOTALE = 6;
    private static final int MOD_PAG = 7;
    private static final int PAGATA = 8;
    private static final int PAGAMENTO = 9;
    private static final int SCADENZA = 10;
    private static final int NOTE_PAG = 11;
    private static final int NOTE = 12;

}