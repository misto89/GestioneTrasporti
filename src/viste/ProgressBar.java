/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package viste;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.SwingWorker;

/**
 * Questa classe permette di visualizzare una progress bar in una dialog durante l'esecuzione di operazioni
 * che richiedono molto tempo per essere eseguite.
 * 
 * @author Michele
 */
public class ProgressBar<T> extends javax.swing.JDialog implements ActionListener, PropertyChangeListener {

    /**
     * Un oggetto di una classe che implementa questa interfaccia rappresenta 
     * l'operazione (implementazione del metodo execute())
     * che deve essere eseguita durante il caricamento della progress bar.
     * 
     * @param <T> Tipo dell'oggetto che si vuole restituire, o Void se non ci si aspetta nessun oggetto di ritorno.
     */
    interface Task<T> {
        public T execute();
    }
    
    private class ProgressTask extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            toReturn = task.execute();
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            done = true;
//            Toolkit.getDefaultToolkit().beep();
            bar.setCursor(null);
            bar.setValue(bar.getMinimum());
            bar.setIndeterminate(false);
            bar.setString(null);
            bar.setValue(0);
            setProgress(0);
            dispose();
        }
        
    }
    
    /**
     * Creates new form ProgressBar
     */
    public ProgressBar(java.awt.Frame parent, Task task) {
        super(parent, true);
        initComponents();
        this.task = task;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bar, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bar, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        actionPerformed(null);
    }//GEN-LAST:event_formWindowOpened

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar bar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
    
        bar.setVisible(true);
        bar.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //Instances of javax.swing.SwingWorker are not reusuable, so
        //we create new instances as needed.
        pTask = new ProgressTask();
        pTask.addPropertyChangeListener(this);
        pTask.execute();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (!done) {
            int progress = pTask.getProgress();
            if (progress == 0) {
                bar.setIndeterminate(true);

            } else {
                bar.setIndeterminate(false); 
                bar.setString(null);
                bar.setValue(progress);

            }
        }
    }
    
    public T get() {
        return (T) toReturn;
    }
    
    private boolean done = false;
    private ProgressTask pTask;
    private Task task;
    private Object toReturn = null;
}
