/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegistroFattureEmesse.java
 *
 * Created on 30-mag-2012, 20.17.33
 */
package viste;

import libs.DoubleFormatter;
import com.itextpdf.text.DocumentException;
import controllo.FrontController;
import entita.Entity;
import entita.Fattura;
import entita.Fornitore;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Date;
import java.util.Calendar;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import stampa.StampaRegistroEmesse;

/**
 *
 * @author Michele
 */
public class RegistroFattureEmesse extends javax.swing.JFrame {
    
    private class FattureTableModel extends DefaultTableModel {
        
        //private final String[] COLONNE;
        private final boolean[] CAN_EDIT;
        private final Class[] types;
        
        public FattureTableModel(Object[][] righe, String[] colonne, Class[] tps, boolean[] edit) {
            super(righe, colonne);
            //COLONNE = colonne;
            CAN_EDIT = edit;
            types = tps;
        }
 
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return CAN_EDIT[columnIndex];
        }
        
        @Override
        public Class getColumnClass(int columnIndex) {
            return this.types[columnIndex];
        }
        
        @Override
        public void setValueAt(Object aValue, int row, int column) {
            super.setValueAt(aValue, row, column);
            
            if (column == PAGATA) {
                char valPagata = (Character) aValue;
                Fattura fattura = fattureInTabella.get(getIndexSelectedFattura());
                if (valPagata == 'S') {
                    FrontController.open(new NotePagamento(vista, rootPaneCheckingEnabled, fattura));
                } else {
                    FrontController.updatePagataFattura(Fattura.tipo.VEN, fattura, false);
                    setFatture();
                }
                
            }
                        
        }
     
    }

    /** Creates new form RegistroFattureEmesse */
    public RegistroFattureEmesse() {
        initComponents();
        ColorManager color = new ColorManager();
        color.changeColor(pnlAnno);
        color.changeColor(pnlCliente);
        color.changeColor(pnlImpTot);
        color.changeColor(pnlIvaTot);
        color.changeColor(pnlMesi);
        color.changeColor(pnlNumFatt);
        color.changeColor(pnlPagate);
        color.changeColor(pnlRiepilogo);
        color.changeColor(pnlScadute);
        color.changeColor(pnlTotFatture);
        color.changeColor(pnlTotNonPagate);
        color.changeColor(pnlTotPagate);
        
        chkMesi = new javax.swing.JCheckBox[]{
            chkGennaio, chkFebbraio, chkMarzo, chkAprile, chkMaggio, chkGiugno, chkLuglio, chkAgosto, chkSett, chkOtt, chkNov, chkDic
        };
        vista = this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAnno = new javax.swing.JPanel();
        cboAnno = new javax.swing.JComboBox();
        pnlRiepilogo = new javax.swing.JPanel();
        pnlNumFatt = new javax.swing.JPanel();
        txtNumFatt = new javax.swing.JTextField();
        pnlImpTot = new javax.swing.JPanel();
        txtTotImp = new javax.swing.JTextField();
        pnlIvaTot = new javax.swing.JPanel();
        txtIvaTot = new javax.swing.JTextField();
        pnlTotFatture = new javax.swing.JPanel();
        txtTotFatture = new javax.swing.JTextField();
        pnlTotPagate = new javax.swing.JPanel();
        txtTotPagate = new javax.swing.JTextField();
        pnlTotNonPagate = new javax.swing.JPanel();
        txtTotNonPagate = new javax.swing.JTextField();
        pnlPagate = new javax.swing.JPanel();
        optTutte = new javax.swing.JRadioButton();
        optPagate = new javax.swing.JRadioButton();
        optNonPagate = new javax.swing.JRadioButton();
        pnlMesi = new javax.swing.JPanel();
        chkTutti = new javax.swing.JCheckBox();
        chkMarzo = new javax.swing.JCheckBox();
        chkGennaio = new javax.swing.JCheckBox();
        chkFebbraio = new javax.swing.JCheckBox();
        chkAprile = new javax.swing.JCheckBox();
        chkMaggio = new javax.swing.JCheckBox();
        chkGiugno = new javax.swing.JCheckBox();
        chkLuglio = new javax.swing.JCheckBox();
        chkAgosto = new javax.swing.JCheckBox();
        chkSett = new javax.swing.JCheckBox();
        chkOtt = new javax.swing.JCheckBox();
        chkNov = new javax.swing.JCheckBox();
        chkDic = new javax.swing.JCheckBox();
        pnlCliente = new javax.swing.JPanel();
        cboCliente = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFatture = new javax.swing.JTable();
        pnlScadute = new javax.swing.JPanel();
        optTutteScad = new javax.swing.JRadioButton();
        optScadute = new javax.swing.JRadioButton();
        optNonScadute = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFattura = new javax.swing.JMenu();
        mnuRistampa = new javax.swing.JMenuItem();
        mnuAnteprima = new javax.swing.JMenuItem();
        mnuAnnullaFattura = new javax.swing.JMenuItem();
        mnuInviaEmail = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnuIntervalloDate = new javax.swing.JCheckBoxMenuItem();
        mnuProspetto = new javax.swing.JMenu();
        mnuStampaCompleta = new javax.swing.JMenuItem();
        mnuStampaParziale = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registro Fatture Emesse");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlAnno.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Anno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        cboAnno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboAnnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAnnoLayout = new javax.swing.GroupLayout(pnlAnno);
        pnlAnno.setLayout(pnlAnnoLayout);
        pnlAnnoLayout.setHorizontalGroup(
            pnlAnnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnnoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboAnno, 0, 201, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAnnoLayout.setVerticalGroup(
            pnlAnnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAnnoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pnlRiepilogo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        pnlNumFatt.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "NÂ° Fatture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtNumFatt.setEnabled(false);

        javax.swing.GroupLayout pnlNumFattLayout = new javax.swing.GroupLayout(pnlNumFatt);
        pnlNumFatt.setLayout(pnlNumFattLayout);
        pnlNumFattLayout.setHorizontalGroup(
            pnlNumFattLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNumFattLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNumFatt, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlNumFattLayout.setVerticalGroup(
            pnlNumFattLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNumFattLayout.createSequentialGroup()
                .addComponent(txtNumFatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlImpTot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Imponibile", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotImp.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotImp.setEnabled(false);

        javax.swing.GroupLayout pnlImpTotLayout = new javax.swing.GroupLayout(pnlImpTot);
        pnlImpTot.setLayout(pnlImpTotLayout);
        pnlImpTotLayout.setHorizontalGroup(
            pnlImpTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlImpTotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotImp, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlImpTotLayout.setVerticalGroup(
            pnlImpTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImpTotLayout.createSequentialGroup()
                .addComponent(txtTotImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlIvaTot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Iva", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtIvaTot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtIvaTot.setEnabled(false);

        javax.swing.GroupLayout pnlIvaTotLayout = new javax.swing.GroupLayout(pnlIvaTot);
        pnlIvaTot.setLayout(pnlIvaTotLayout);
        pnlIvaTotLayout.setHorizontalGroup(
            pnlIvaTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlIvaTotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtIvaTot, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlIvaTotLayout.setVerticalGroup(
            pnlIvaTotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIvaTotLayout.createSequentialGroup()
                .addComponent(txtIvaTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotFatture.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Fatture", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotFatture.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotFatture.setEnabled(false);

        javax.swing.GroupLayout pnlTotFattureLayout = new javax.swing.GroupLayout(pnlTotFatture);
        pnlTotFatture.setLayout(pnlTotFattureLayout);
        pnlTotFattureLayout.setHorizontalGroup(
            pnlTotFattureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotFattureLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotFatture, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTotFattureLayout.setVerticalGroup(
            pnlTotFattureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotFattureLayout.createSequentialGroup()
                .addComponent(txtTotFatture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotPagate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Pagate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotPagate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotPagate.setEnabled(false);

        javax.swing.GroupLayout pnlTotPagateLayout = new javax.swing.GroupLayout(pnlTotPagate);
        pnlTotPagate.setLayout(pnlTotPagateLayout);
        pnlTotPagateLayout.setHorizontalGroup(
            pnlTotPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotPagateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotPagate, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTotPagateLayout.setVerticalGroup(
            pnlTotPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotPagateLayout.createSequentialGroup()
                .addComponent(txtTotPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTotNonPagate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Tot. Non pagate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtTotNonPagate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotNonPagate.setEnabled(false);

        javax.swing.GroupLayout pnlTotNonPagateLayout = new javax.swing.GroupLayout(pnlTotNonPagate);
        pnlTotNonPagate.setLayout(pnlTotNonPagateLayout);
        pnlTotNonPagateLayout.setHorizontalGroup(
            pnlTotNonPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotNonPagateLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTotNonPagate, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTotNonPagateLayout.setVerticalGroup(
            pnlTotNonPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTotNonPagateLayout.createSequentialGroup()
                .addComponent(txtTotNonPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlRiepilogoLayout = new javax.swing.GroupLayout(pnlRiepilogo);
        pnlRiepilogo.setLayout(pnlRiepilogoLayout);
        pnlRiepilogoLayout.setHorizontalGroup(
            pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRiepilogoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNumFatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlImpTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlIvaTot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTotFatture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTotPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTotNonPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        pnlRiepilogoLayout.setVerticalGroup(
            pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRiepilogoLayout.createSequentialGroup()
                .addGroup(pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTotFatture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlNumFatt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlRiepilogoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlImpTot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlIvaTot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlTotPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlTotNonPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlPagate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pagate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        optTutte.setSelected(true);
        optTutte.setText("Tutte");
        optTutte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTutteActionPerformed(evt);
            }
        });

        optPagate.setText("Pagate");
        optPagate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optPagateActionPerformed(evt);
            }
        });

        optNonPagate.setText("Non Pagate");
        optNonPagate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optNonPagateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPagateLayout = new javax.swing.GroupLayout(pnlPagate);
        pnlPagate.setLayout(pnlPagateLayout);
        pnlPagateLayout.setHorizontalGroup(
            pnlPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optTutte)
                    .addComponent(optPagate)
                    .addComponent(optNonPagate))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        pnlPagateLayout.setVerticalGroup(
            pnlPagateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagateLayout.createSequentialGroup()
                .addComponent(optTutte)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optPagate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optNonPagate))
        );

        pnlMesi.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mesi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        chkTutti.setSelected(true);
        chkTutti.setText("Tutti");
        chkTutti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTuttiActionPerformed(evt);
            }
        });

        chkMarzo.setSelected(true);
        chkMarzo.setText("Marzo");
        chkMarzo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMarzoActionPerformed(evt);
            }
        });

        chkGennaio.setSelected(true);
        chkGennaio.setText("Gennaio");
        chkGennaio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGennaioActionPerformed(evt);
            }
        });

        chkFebbraio.setSelected(true);
        chkFebbraio.setText("Febbraio");
        chkFebbraio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFebbraioActionPerformed(evt);
            }
        });

        chkAprile.setSelected(true);
        chkAprile.setText("Aprile");
        chkAprile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAprileActionPerformed(evt);
            }
        });

        chkMaggio.setSelected(true);
        chkMaggio.setText("Maggio");
        chkMaggio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMaggioActionPerformed(evt);
            }
        });

        chkGiugno.setSelected(true);
        chkGiugno.setText("Giugno");
        chkGiugno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGiugnoActionPerformed(evt);
            }
        });

        chkLuglio.setSelected(true);
        chkLuglio.setText("Luglio");
        chkLuglio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLuglioActionPerformed(evt);
            }
        });

        chkAgosto.setSelected(true);
        chkAgosto.setText("Agosto");
        chkAgosto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAgostoActionPerformed(evt);
            }
        });

        chkSett.setSelected(true);
        chkSett.setText("Settembre");
        chkSett.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSettActionPerformed(evt);
            }
        });

        chkOtt.setSelected(true);
        chkOtt.setText("Ottobre");
        chkOtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkOttActionPerformed(evt);
            }
        });

        chkNov.setSelected(true);
        chkNov.setText("Novembre");
        chkNov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkNovActionPerformed(evt);
            }
        });

        chkDic.setSelected(true);
        chkDic.setText("Dicembre");
        chkDic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMesiLayout = new javax.swing.GroupLayout(pnlMesi);
        pnlMesi.setLayout(pnlMesiLayout);
        pnlMesiLayout.setHorizontalGroup(
            pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addComponent(chkTutti)
                .addGap(18, 18, 18)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMarzo)
                    .addComponent(chkGennaio)
                    .addComponent(chkFebbraio))
                .addGap(18, 18, 18)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkGiugno)
                    .addComponent(chkAprile)
                    .addComponent(chkMaggio))
                .addGap(26, 26, 26)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSett)
                    .addComponent(chkLuglio)
                    .addComponent(chkAgosto))
                .addGap(18, 18, 18)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDic)
                    .addComponent(chkOtt)
                    .addComponent(chkNov)))
        );
        pnlMesiLayout.setVerticalGroup(
            pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addComponent(chkOtt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkNov)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkDic))
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addComponent(chkLuglio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkAgosto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkSett))
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addComponent(chkAprile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMaggio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkGiugno))
            .addGroup(pnlMesiLayout.createSequentialGroup()
                .addComponent(chkGennaio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMesiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkTutti)
                    .addComponent(chkFebbraio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMarzo))
        );

        pnlCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        cboCliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tutti i clienti" }));
        cboCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlClienteLayout = new javax.swing.GroupLayout(pnlCliente);
        pnlCliente.setLayout(pnlClienteLayout);
        pnlClienteLayout.setHorizontalGroup(
            pnlClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cboCliente, 0, 235, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlClienteLayout.setVerticalGroup(
            pnlClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClienteLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(cboCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        tblFatture.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblFatture);

        pnlScadute.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Scadute", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        optTutteScad.setSelected(true);
        optTutteScad.setText("Tutte");
        optTutteScad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTutteScadActionPerformed(evt);
            }
        });

        optScadute.setText("Scadute");
        optScadute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optScaduteActionPerformed(evt);
            }
        });

        optNonScadute.setText("Non Scadute");
        optNonScadute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optNonScaduteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlScaduteLayout = new javax.swing.GroupLayout(pnlScadute);
        pnlScadute.setLayout(pnlScaduteLayout);
        pnlScaduteLayout.setHorizontalGroup(
            pnlScaduteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScaduteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScaduteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optTutteScad)
                    .addComponent(optScadute)
                    .addComponent(optNonScadute))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        pnlScaduteLayout.setVerticalGroup(
            pnlScaduteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScaduteLayout.createSequentialGroup()
                .addComponent(optTutteScad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optScadute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optNonScadute))
        );

        mnuFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emettifattura.png"))); // NOI18N
        mnuFattura.setText("Fattura");
        mnuFattura.setEnabled(false);

        mnuRistampa.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mnuRistampa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuRistampa.setText("Ristampa fattura");
        mnuRistampa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRistampaActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuRistampa);

        mnuAnteprima.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuAnteprima.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anteprimastampa.png"))); // NOI18N
        mnuAnteprima.setText("Anteprima di stampa");
        mnuAnteprima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAnteprimaActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuAnteprima);

        mnuAnnullaFattura.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuAnnullaFattura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/annulla.png"))); // NOI18N
        mnuAnnullaFattura.setText("Annulla fattura");
        mnuAnnullaFattura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAnnullaFatturaActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuAnnullaFattura);

        mnuInviaEmail.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mnuInviaEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/emailsend.png"))); // NOI18N
        mnuInviaEmail.setText("Invia per email");
        mnuInviaEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuInviaEmailActionPerformed(evt);
            }
        });
        mnuFattura.add(mnuInviaEmail);

        jMenuBar1.add(mnuFattura);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/filtra.png"))); // NOI18N
        jMenu3.setText("Filtra");

        mnuIntervalloDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mnuIntervalloDate.setText("Per intervallo date");
        mnuIntervalloDate.setToolTipText("");
        mnuIntervalloDate.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/img/intervallodate.png"))); // NOI18N
        mnuIntervalloDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/intervallodate.png"))); // NOI18N
        mnuIntervalloDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIntervalloDateActionPerformed(evt);
            }
        });
        jMenu3.add(mnuIntervalloDate);

        jMenuBar1.add(jMenu3);

        mnuProspetto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/prospetto.png"))); // NOI18N
        mnuProspetto.setText("Prospetto");
        mnuProspetto.setEnabled(false);

        mnuStampaCompleta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuStampaCompleta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampaCompleta.setText("Stampa completa");
        mnuStampaCompleta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStampaCompletaActionPerformed(evt);
            }
        });
        mnuProspetto.add(mnuStampaCompleta);

        mnuStampaParziale.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnuStampaParziale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/stampa.png"))); // NOI18N
        mnuStampaParziale.setText("Stampa parziale");
        mnuStampaParziale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStampaParzialeActionPerformed(evt);
            }
        });
        mnuProspetto.add(mnuStampaParziale);

        jMenuBar1.add(mnuProspetto);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlRiepilogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlPagate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pnlScadute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlMesi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlAnno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(pnlRiepilogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlMesi, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlScadute, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPagate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void chkMaggioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMaggioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkMaggioActionPerformed

private void chkDicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDicActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkDicActionPerformed

private void optTutteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTutteActionPerformed
// TODO add your handling code here:
    optNonPagate.setSelected(false);
    optPagate.setSelected(false);
    optTutte.setSelected(true);
    setFatture();
}//GEN-LAST:event_optTutteActionPerformed

private void optPagateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optPagateActionPerformed
// TODO add your handling code here:
    optNonPagate.setSelected(false);
    optTutte.setSelected(false);
    optPagate.setSelected(true);
    setFatture();
}//GEN-LAST:event_optPagateActionPerformed

private void optNonPagateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optNonPagateActionPerformed
// TODO add your handling code here:
    optPagate.setSelected(false);
    optTutte.setSelected(false);
    optNonPagate.setSelected(true);
    setFatture();
}//GEN-LAST:event_optNonPagateActionPerformed

private void chkTuttiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTuttiActionPerformed
// TODO add your handling code here:
    for (javax.swing.JCheckBox mese : chkMesi){
        mese.setSelected(chkTutti.isSelected());
    }
    dataFinale = null;
    dataIniziale = null;
    mnuIntervalloDate.setSelected(false);
    setFatture();
}//GEN-LAST:event_chkTuttiActionPerformed

private void chkGennaioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGennaioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkGennaioActionPerformed

private void chkFebbraioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFebbraioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkFebbraioActionPerformed

private void chkMarzoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMarzoActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkMarzoActionPerformed

private void chkAprileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAprileActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkAprileActionPerformed

private void chkGiugnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGiugnoActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkGiugnoActionPerformed

private void chkLuglioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLuglioActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkLuglioActionPerformed

private void chkAgostoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAgostoActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkAgostoActionPerformed

private void chkSettActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSettActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkSettActionPerformed

private void chkOttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkOttActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkOttActionPerformed

private void chkNovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkNovActionPerformed
// TODO add your handling code here:
    setCheckBox();
    setFatture();
}//GEN-LAST:event_chkNovActionPerformed

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    List<Entity> fornitori = FrontController.getAnagrafe(Fornitore.class);
    List<Integer> anni = FrontController.getAnniEsercizio(Fattura.tipo.VEN);
    popolaSelect(fornitori);
    popolaSelect(anni);
}//GEN-LAST:event_formWindowOpened

private void cboClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClienteActionPerformed
// TODO add your handling code here:
    setFatture();
}//GEN-LAST:event_cboClienteActionPerformed

private void cboAnnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboAnnoActionPerformed
// TODO add your handling code here:
    dataFinale = null;
    dataIniziale = null;
    mnuIntervalloDate.setSelected(false);
    setFatture();
}//GEN-LAST:event_cboAnnoActionPerformed

private void mnuAnnullaFatturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAnnullaFatturaActionPerformed
// TODO add your handling code here:
    final int RESPONSE = JOptionPane.showConfirmDialog(this, "Sei sicuro di voler annullare la fattura emessa?\nSi ricorda che tutte le spedizioni appartenenti alla fattura selezionata torneranno allo stato di non fatturate",
            "Conferma annullamento fattura", JOptionPane.OK_CANCEL_OPTION);
    if (RESPONSE == JOptionPane.OK_OPTION) {
        if (FrontController.delete(fattureInTabella.get(getIndexSelectedFattura()))) {
            setFatture();
            JOptionPane.showMessageDialog(this, "Fattura annullata con successo!", "", JOptionPane.INFORMATION_MESSAGE);
        } else 
            JOptionPane.showMessageDialog(this, "Si Ã¨ verificato un errore durante l'eliminazione della fattura!", "Errore", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_mnuAnnullaFatturaActionPerformed

private void optTutteScadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTutteScadActionPerformed
// TODO add your handling code here
    optNonScadute.setSelected(false);
    optScadute.setSelected(false);
    optTutteScad.setSelected(true);
    setFatture();
}//GEN-LAST:event_optTutteScadActionPerformed

private void optScaduteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optScaduteActionPerformed
// TODO add your handling code here:
    optNonScadute.setSelected(false);
    optTutteScad.setSelected(false);
    optScadute.setSelected(true);
    setFatture();
}//GEN-LAST:event_optScaduteActionPerformed

private void optNonScaduteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optNonScaduteActionPerformed
// TODO add your handling code here:
    optTutteScad.setSelected(false);
    optScadute.setSelected(false);
    optNonScadute.setSelected(true);
    setFatture();
}//GEN-LAST:event_optNonScaduteActionPerformed

private void mnuRistampaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRistampaActionPerformed
// TODO add your handling code here:    
    Fattura fattura = fattureInTabella.get(getIndexSelectedFattura());
    
    try {
        new stampa.StampaFattura(fattura, fattura.getCliente(), false).printAndOpen();

    } catch (DocumentException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_mnuRistampaActionPerformed

private void mnuIntervalloDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIntervalloDateActionPerformed
// TODO add your handling code here:
    // TODO add your handling code here:
    boolean okDate = false;
    java.util.Calendar currentime = Calendar.getInstance();
    dataIniziale = null;
    dataFinale = new Date((currentime.getTime()).getTime()); //data odierna
   
    /*
     * Il ciclo viene ripetuto fino a quando viene inserita una data nel formato corretto, oppure
     * fino a quando l'utente non decide di annullare l'operazione di filtraggio.
     */
    while (!okDate) {
        String dataI;
        try {
            /*
             * Il ciclo viene ripetuto fino a quando l'utente continua a cliccare ok sull'input senza
             * inserire alcun valore.
             */
            while ((dataI = JOptionPane.showInputDialog(rootPane, "Inserisci la data iniziale")).isEmpty());
            
        } catch (NullPointerException e) { //L'utente ha premuto annulla sull'input dialog
            mnuIntervalloDate.setSelected(false);
            return;
        }
    
        if (!checkData(dataI)) //Il formato della data inserita dall'utente, non Ã¨ gg/mm/aaaa
            JOptionPane.showMessageDialog(rootPane, "Inserisci la data nel formato gg/mm/aaaa", "Formato errato", JOptionPane.ERROR_MESSAGE);
        
        else { //Il formato Ã¨ corretto
            String splitted[] = dataI.split("\\/");
            String giorno = splitted[0];
            String mese = splitted[1];
            String anno = splitted[2];
            
            if (anno.length() == 2)
                anno = "20" + anno;
                    
            else if (anno.length() == 3)
                anno = "2" + anno;

            if (mese.length() == 1)
                mese = "0" + mese;

            if (giorno.length() == 1) 
                giorno = "0" + giorno;
            
            try {
                dataIniziale = Date.valueOf(anno + "-" + mese + "-" + giorno);
                okDate = true;
                
            } catch (IllegalArgumentException e) { //Il valore inserito per la data non Ã¨ valido, perchÃ© non esiste. Per esempio si inserisce 13 come mese
                JOptionPane.showMessageDialog(rootPane, "Inserisci la data nel formato corretto", "Valore errato", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }
    
    okDate = false;
    
    //Come quello di cui sopra
    while (!okDate) {
        String dataF = JOptionPane.showInputDialog(rootPane, "Inserisci la data finale oppure premi OK se vuoi utilizzare la data odierna.");
        if (dataF == null) { //L'utente ha premuto annulla sull'input dialog
            mnuIntervalloDate.setSelected(false);
            return;
        }
        
        if (!(dataF.isEmpty())) { //La data inserita non Ã¨ la stringa vuota
            if (!checkData(dataF)) //Il formato della data inserita dall'utente, non Ã¨ gg/mm/aaaa
                JOptionPane.showMessageDialog(rootPane, "Inserisci la data nel formato gg/mm/aaaa", "Formato errato", JOptionPane.ERROR_MESSAGE);
            
            else { //Il formato Ã¨ corretto
                String splitted[] = dataF.split("\\/");
                String giorno = splitted[0];
                String mese = splitted[1];
                String anno = splitted[2];
                
                if (anno.length() == 2)
                    anno = "20" + anno;
                    
                else if (anno.length() == 3)
                    anno = "2" + anno;

                if (mese.length() == 1)
                    mese = "0" + mese;

                if (giorno.length() == 1) 
                    giorno = "0" + giorno;
                
                try {
                    dataFinale = Date.valueOf(anno + "-" + mese + "-" + giorno);
                    okDate = true;
                    
                } catch (IllegalArgumentException e) { //Il valore inserito per la data non Ã¨ valido, perchÃ© non esiste. Per esempio si inserisce 13 come mese
                    JOptionPane.showMessageDialog(rootPane, "Inserisci la data nel formato corretto", "Valore errato", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        } else //L'utente non ha inserito alcuna data, quindi viene considerata la data odierna come data finale
            okDate = true;
   }
   if (okDate) {
       for (javax.swing.JCheckBox c : chkMesi){
           c.setSelected(false);
       }
       chkTutti.setSelected(false);
       setFatture();
   }
}//GEN-LAST:event_mnuIntervalloDateActionPerformed

private void mnuInviaEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuInviaEmailActionPerformed
// TODO add your handling code here:
    Fattura fattura = fattureInTabella.get(getIndexSelectedFattura());
    FrontController.open(new InvioMail(this, rootPaneCheckingEnabled, fattura));
}//GEN-LAST:event_mnuInviaEmailActionPerformed

private void mnuStampaCompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStampaCompletaActionPerformed
// TODO add your handling code here:

    Object[] riepilogo = {
        Integer.parseInt(txtNumFatt.getText()), Double.parseDouble(txtTotImp.getText()), Double.parseDouble(txtIvaTot.getText()),
        Double.parseDouble(txtTotFatture.getText()), Double.parseDouble(txtTotPagate.getText()), Double.parseDouble(txtTotNonPagate.getText())
    };
    
    Stampa(true, riepilogo);
}//GEN-LAST:event_mnuStampaCompletaActionPerformed

private void mnuAnteprimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAnteprimaActionPerformed
// TODO add your handling code here:
    Fattura fattura = fattureInTabella.get(getIndexSelectedFattura());
    
    try {
        new stampa.StampaFattura(fattura, fattura.getCliente(), true).printAndOpen();

    } catch (DocumentException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    }
}//GEN-LAST:event_mnuAnteprimaActionPerformed

private void Stampa(boolean isCompleta, Object[] riepilogo) {
    Fattura.pagata filtroP;
    if (optPagate.isSelected())
        filtroP = Fattura.pagata.P;
    else if (optNonPagate.isSelected())
        filtroP = Fattura.pagata.NP;
    else
        filtroP = Fattura.pagata.ALL;
    
    Fattura.scaduta filtroS;
    if (optScadute.isSelected())
        filtroS = Fattura.scaduta.S;
    else if (optNonScadute.isSelected())
        filtroS = Fattura.scaduta.NS;
    else
        filtroS = Fattura.scaduta.ALL;
    
    Fornitore cliente = null;
    if (cboCliente.getSelectedIndex() > 0)
        cliente = (Fornitore) cboCliente.getSelectedItem();
    
    List<String> mesi = new LinkedList<String>();
    for (int i = 0; i < chkMesi.length; i++)
        if (chkMesi[i].isSelected())
            mesi.add(meseToString(i + 1));
    
    try {
        if (mnuIntervalloDate.isSelected())
            new StampaRegistroEmesse(dataIniziale, dataFinale, filtroP, filtroS, cliente, riepilogo, mesi, fattureInTabella, isCompleta).printAndOpen();
        else
            new StampaRegistroEmesse((Integer)cboAnno.getSelectedItem(), filtroP, filtroS, cliente, riepilogo, mesi, fattureInTabella, isCompleta).printAndOpen();
        
    } catch (DocumentException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(Spedizioni.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private void mnuStampaParzialeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStampaParzialeActionPerformed
// TODO add your handling code here:
    Object[] riepilogo = {
        Integer.parseInt(txtNumFatt.getText()), Double.parseDouble(txtTotFatture.getText()), 
        Double.parseDouble(txtTotPagate.getText()), Double.parseDouble(txtTotNonPagate.getText())
    };
    
    Stampa(false, riepilogo);
}//GEN-LAST:event_mnuStampaParzialeActionPerformed

private String meseToString(int mese) {
    String stringa = null;
    switch (mese) {
        case 1: stringa = "Gennaio"; break;
        case 2: stringa = "Febbraio"; break;
        case 3: stringa = "Marzo"; break;
        case 4: stringa = "Aprile"; break;
        case 5: stringa = "Maggio"; break;
        case 6: stringa = "Giugno"; break;
        case 7: stringa = "Luglio"; break;
        case 8: stringa = "Agosto"; break;
        case 9: stringa = "Settembre"; break;
        case 10: stringa = "Ottobre"; break;
        case 11: stringa = "Novembre"; break;
        case 12: stringa = "Dicembre"; break;
    }
    
    return stringa;
}

private boolean checkData(String data) {
    Pattern pattern = Pattern.compile("\\d{1,2}/\\d{1,2}/\\d{2,4}");
    Matcher match = pattern.matcher(data);
    return match.matches();
      
}

/*
 * Popola la select dei fornitori.
 */
private void popolaSelect(List items) {
    for (Object item : items)
        if (item instanceof Integer)
            cboAnno.addItem((Integer)item);
        else
            cboCliente.addItem((Fornitore) item);

}

private void setCheckBox() {
    dataIniziale = null;
    dataFinale = null;
    mnuIntervalloDate.setSelected(false);
    int i = 0;
    for (javax.swing.JCheckBox mese : chkMesi){
        if (mese.isSelected())
            i++;
    }
    
    if (i == 12)
        chkTutti.setSelected(true);
    else 
        chkTutti.setSelected(false);
}

void setFatture() {
    Fornitore cliente = null;
    if (cboCliente.getSelectedIndex() == 0)
        cliente = new Fornitore(null);  
    else
        cliente = (Fornitore) cboCliente.getSelectedItem();
    
    boolean[] mesi = {
            chkGennaio.isSelected(), chkFebbraio.isSelected(), chkMarzo.isSelected(), chkAprile.isSelected(), chkMaggio.isSelected(), 
            chkGiugno.isSelected(), chkLuglio.isSelected(), chkAgosto.isSelected(), chkSett.isSelected(), chkOtt.isSelected(),
            chkNov.isSelected(), chkDic.isSelected()
    };
    
    Fattura.pagata tipo;
    if (optTutte.isSelected())
        tipo = Fattura.pagata.ALL;
    else if (optNonPagate.isSelected())
        tipo = Fattura.pagata.NP;
    else
        tipo = Fattura.pagata.P;
    
    List<Fattura> fattureProvvisorie = FrontController.getFatture((Integer)cboAnno.getSelectedItem(), cliente, mesi, tipo, dataIniziale, dataFinale);
    List<Fattura> fatture = new LinkedList<Fattura>();
    
    if (optScadute.isSelected()) {
        for (Fattura fattura : fattureProvvisorie)
            if (fattura.isScaduta())
                fatture.add(fattura);
        
    } else if (optNonScadute.isSelected()) {
        for (Fattura fattura : fattureProvvisorie)
            if (!fattura.isScaduta())
                fatture.add(fattura);
        
    } else {
        fatture = fattureProvvisorie;
    }
    
    fattureInTabella = fatture;
    if (fatture.isEmpty())
        mnuProspetto.setEnabled(false);
    else
        mnuProspetto.setEnabled(true);
        
    Object[] arFatt = fatture.toArray();
    Object[][] arrayFatt = new Object[arFatt.length][Fattura.NUM_CAMPI_EMESSE];
    int contFatt = 0;
    double totImponibile = 0.00;
    double totIva = 0.00;
    double totTotale = 0.00;
    double totPagate = 0.00;
    double totNonPagate = 0.00;
    for (Object fatt : arFatt) {
        arrayFatt[contFatt++] = ((Fattura) fatt).toArray();
        totImponibile += ((Fattura) fatt).getImponibile();
        totIva += ((Fattura) fatt).getIva();
        totTotale += ((Fattura) fatt).getTotale();
        if (((Fattura)fatt).getPagata())
            totPagate += ((Fattura) fatt).getTotale();
        else
            totNonPagate += ((Fattura) fatt).getTotale();
        
    }
     
    txtNumFatt.setText(String.valueOf(contFatt));
    txtIvaTot.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totIva)));
    txtTotFatture.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totTotale)));
    txtTotImp.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totImponibile)));
    txtTotPagate.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totPagate)));
    txtTotNonPagate.setText(String.valueOf(DoubleFormatter.roundTwoDecimals(totNonPagate)));
    
    final String[] COLONNE = {
        "CLIENTE", "NUM. FATT.", "DATA", "IMPONIBILE", "IVA", 
        "TOTALE", "MOD. PAGAMENTO", "PAGATA", "DATA PAGAMENTO", "SCADENZA", "NOTE PAGAM.", "NOTE"
    };
    
    Class[] types = { String.class, Integer.class, Object.class,
                        Double.class, Double.class, Double.class, String.class, Character.class, Object.class, Object.class, String.class, String.class };
    
    TableModel tm = new FattureTableModel(arrayFatt, COLONNE, types, new boolean[] {
        false, false, false, false, false, false, false, true, false, false, false, false
    });    
    
    tblFatture.setModel(tm);
    tblFatture.setRowSorter(new TableRowSorter(tm) {

        class DateComparator implements Comparator {

            @Override
            public int compare(Object o1, Object o2) {
                String[] data1_str = ((String) o1).split("/");
                String[] data2_str = ((String) o2).split("/");

                Date data1 = Date.valueOf(data1_str[2] + "-" + data1_str[1] + "-" + data1_str[0]);
                Date data2 = Date.valueOf(data2_str[2] + "-" + data2_str[1] + "-" + data2_str[0]);

                return data1.compareTo(data2);
            }
            
        }
        
        @Override
        public void sort() {
            setComparator(DATA, new DateComparator());
            setComparator(SCADENZA, new DateComparator());
            super.sort();

        }
        
    });
    
    boolean[] resizable = {
        true, false, false, false, false, false, false, false, false, false, true, true
    };
    
    int[] width = {
        300, 100, 90, 125, 125, 125, 170, 70, 125, 125, 300, 300
    };
    
    tblFatture.getTableHeader().setReorderingAllowed(false); //Fa in modo che l'utente non possa modificare l'ordine delle colonne
        
    //Imposta la larghezza dei singoli campi
    tblFatture.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    
    for (int i = 0; i < COLONNE.length; i++) {
        TableColumn colonna = tblFatture.getColumnModel().getColumn(i);
        colonna.setResizable(resizable[i]);
        colonna.setPreferredWidth(width[i]);
    }
    
    tblFatture.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    
    mnuFattura.setEnabled(false);
    tblFatture.addMouseListener(new MouseAdapter() {
        public void mouseClicked(MouseEvent me) {
            mnuFattura.setEnabled(true);
            if (me.getClickCount() > 1) {
                if (tblFatture.getSelectedColumn() == MOD_PAG) {
                    FrontController.open(new ModificaModPagamento(vista, rootPaneCheckingEnabled, fattureInTabella.get(getIndexSelectedFattura())));
                    
                } else {
                    mnuAnteprimaActionPerformed(null);
                }
            } 
        }

    });
    
//    tblFatture.getTableHeader().addMouseListener(new MouseAdapter() {
//            @Override
//            public void mouseClicked(MouseEvent e) {
//                super.mouseClicked(e);
//                int col = tblFatture.getColumnModel().getColumnIndexAtX(e.getX());
//                
//            }
//
//    });

    Character[] valoriPagata = {'S', 'N'};
    DefaultCellEditor comboPagata = new DefaultCellEditor(new JComboBox(valoriPagata));
    comboPagata.setClickCountToStart(2);
    tblFatture.getColumnModel().getColumn(PAGATA).setCellEditor(comboPagata);
    
    for (int i = IMPONIBILE; i <= TOTALE; i++)
        tblFatture.getColumnModel().getColumn(i).setCellRenderer(new DoubleFormatter());
}

    private int getIndexSelectedFattura() {
        Fattura fatt = new Fattura();
        fatt.setNumero((Integer) tblFatture.getValueAt(tblFatture.getSelectedRow(), NUM));
        String[] data = ((String) tblFatture.getValueAt(tblFatture.getSelectedRow(), DATA)).split("/");
        Date dataFatt = Date.valueOf(data[2] + "-" + data[1] + "-" + data[0]);
        fatt.setData(dataFatt);
        
        return fattureInTabella.indexOf(fatt);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboAnno;
    private javax.swing.JComboBox cboCliente;
    private javax.swing.JCheckBox chkAgosto;
    private javax.swing.JCheckBox chkAprile;
    private javax.swing.JCheckBox chkDic;
    private javax.swing.JCheckBox chkFebbraio;
    private javax.swing.JCheckBox chkGennaio;
    private javax.swing.JCheckBox chkGiugno;
    private javax.swing.JCheckBox chkLuglio;
    private javax.swing.JCheckBox chkMaggio;
    private javax.swing.JCheckBox chkMarzo;
    private javax.swing.JCheckBox chkNov;
    private javax.swing.JCheckBox chkOtt;
    private javax.swing.JCheckBox chkSett;
    private javax.swing.JCheckBox chkTutti;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mnuAnnullaFattura;
    private javax.swing.JMenuItem mnuAnteprima;
    private javax.swing.JMenu mnuFattura;
    private javax.swing.JCheckBoxMenuItem mnuIntervalloDate;
    private javax.swing.JMenuItem mnuInviaEmail;
    private javax.swing.JMenu mnuProspetto;
    private javax.swing.JMenuItem mnuRistampa;
    private javax.swing.JMenuItem mnuStampaCompleta;
    private javax.swing.JMenuItem mnuStampaParziale;
    private javax.swing.JRadioButton optNonPagate;
    private javax.swing.JRadioButton optNonScadute;
    private javax.swing.JRadioButton optPagate;
    private javax.swing.JRadioButton optScadute;
    private javax.swing.JRadioButton optTutte;
    private javax.swing.JRadioButton optTutteScad;
    private javax.swing.JPanel pnlAnno;
    private javax.swing.JPanel pnlCliente;
    private javax.swing.JPanel pnlImpTot;
    private javax.swing.JPanel pnlIvaTot;
    private javax.swing.JPanel pnlMesi;
    private javax.swing.JPanel pnlNumFatt;
    private javax.swing.JPanel pnlPagate;
    private javax.swing.JPanel pnlRiepilogo;
    private javax.swing.JPanel pnlScadute;
    private javax.swing.JPanel pnlTotFatture;
    private javax.swing.JPanel pnlTotNonPagate;
    private javax.swing.JPanel pnlTotPagate;
    private javax.swing.JTable tblFatture;
    private javax.swing.JTextField txtIvaTot;
    private javax.swing.JTextField txtNumFatt;
    private javax.swing.JTextField txtTotFatture;
    private javax.swing.JTextField txtTotImp;
    private javax.swing.JTextField txtTotNonPagate;
    private javax.swing.JTextField txtTotPagate;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JCheckBox[] chkMesi;
    private List<Fattura> fattureInTabella;
    Date dataIniziale = null;
    Date dataFinale = null;
    private RegistroFattureEmesse vista;
    
    private static final int CLIENTE = 0;
    private static final int NUM = 1;
    private static final int DATA = 2;
    private static final int IMPONIBILE = 3;
    private static final int IVA = 4;
    private static final int TOTALE = 5;
    private static final int MOD_PAG = 6;
    private static final int PAGATA = 7;
    private static final int PAGAMENTO = 8;
    private static final int SCADENZA = 9;
    private static final int NOTE_PAG = 10;
    private static final int NOTE = 11;

}